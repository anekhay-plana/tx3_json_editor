{"version":3,"sources":["components/NewEditor/Constructor/ObjectField/ObjectField.tsx","components/NewEditor/Constructor/ArrayField/ArrayField.tsx","components/NewEditor/Constructor/StringtField/StringtField.tsx","components/NewEditor/Constructor/Constructor.tsx","components/NewEditor/ViewJson/ViewJson.tsx","json/schemes/ApprovalPolicy.js","components/NewEditor/NewEditor.tsx","json/ApprovalPolicy.js","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ObjectField","field","json","onChange","name","onChangeInObject","key","value","fields","Object","keys","className","map","item","i","ArrayField","useState","open","setOpen","onChangeInArray","newArray","trigger","onOpening","onClose","transitionTime","innerType","StringField","formik","useFormik","initialValues","label","validateOnBlur","validationSchema","yup","onSubmit","TextField","fullWidth","values","e","handleChange","setFieldTouched","target","error","touched","Boolean","errors","helperText","Constructor","props","type","renderField","ViewJson","data","locale","placeholder","confirmGood","viewOnly","width","height","ApprovalPolicySchema","required","url","number","of","NewEditor","formData","setFormData","yupSchema","object","ApprovalPolicy","MainWindow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d0aa7f4.chunk.js","sourcesContent":["import Constructor from \"../Constructor\";\nimport './ObjectField.css'\n\ninterface Props {\n    field: any\n    json: any\n    onChange:any\n    name?: string|number\n}\n\nconst ObjectField: React.FC<Props> = ({field, json,  onChange,name}) => {\n    const onChangeInObject = (key, value)=>{\n        if(name || name === 0) {\n            onChange(name,{...json, [key]: value})\n        }else{\n            onChange({...json, [key]: value})\n        }\n    }\n    const fields = Object.keys(field.fields)\n    return (\n        <div className='object-container'>\n                {fields.map((item, i) =>\n                    <div key={i} className='object-child-container'>\n                        <Constructor\n                            field={field.fields[item]}\n                            json={json[item]}\n                            name={item}\n                            onChange={onChangeInObject}/>\n                    </div>\n                )}\n        </div>\n    )\n}\n\nexport default ObjectField\n","import Constructor from \"../Constructor\";\nimport Collapsible from \"react-collapsible\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport * as React from \"react\";\nimport './ArrayField.css'\nimport {useState} from \"react\";\n\ninterface Props {\n    field: any\n    json: any\n    name?: string\n    onChange: any\n}\n\nconst ArrayField: React.FC<Props> = ({field, json, name, onChange}) => {\n    const [open, setOpen] = useState(false)\n\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i]=value\n        onChange(name, newArray)\n    }\n\n    return (\n        <div className='array-container'>\n            <Collapsible\n                trigger={\n                    <div className='title'>\n                        <div>{name}</div>\n                        <ExpandMoreIcon className={open ? 'rev-icon' : 'icon'}/>\n                    </div>\n                }\n                onOpening={() => setOpen(true)}\n                onClose={() => setOpen(false)}\n                transitionTime={200}\n            >\n                <div>\n                    {json.map((item, i) =>\n                        <Constructor key={i} field={field.innerType} json={item} name={i} onChange={onChangeInArray}/>\n                    )}\n                </div>\n            </Collapsible>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import {TextField} from \"@material-ui/core\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\n\ninterface Props {\n    field: any\n    json: any\n    name?: string\n    onChange: any\n}\n\nconst StringField: React.FC<Props> = ({field, json, name,onChange}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            label: name,\n            value: json\n        },\n        validateOnBlur: true,\n        validationSchema: yup.object({\n            'value':field\n        }),\n        onSubmit: () => {\n        }\n    });\n\n    const handleChange = (e) => {\n        formik.handleChange(e);\n        formik.setFieldTouched('value');\n        onChange(name,e.target.value)\n    }\n\n    return (\n        <div>\n            <TextField\n                fullWidth\n                name={'value'}\n                label={formik.values.label}\n                value={formik.values.value}\n                onChange={handleChange}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n                helperText={formik.touched.value && formik.errors.value}\n            />\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport StringField from \"./StringtField/StringtField\";\n\ninterface Props {\n    field: any\n    json: any\n    name? :string\n    onChange: any\n}\n\nconst Constructor: React.FC<Props> = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type){\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n}\n\nexport default Constructor\n","import * as React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport './ViewJson.css'\n\ninterface Props {\n    data: object\n}\n\nconst ViewJson: React.FC<Props> = ({data}) => {\n    return (\n        <div className='json-display-window'>\n            <div>\n                <JSONInput\n                    locale={locale}\n                    placeholder={data}\n                    confirmGood={false}\n                    viewOnly={true}\n                    width='100%'\n                    height='100%'\n                />\n            </div>\n        </div>\n    )\n\n}\nexport default ViewJson\n","import * as yup from 'yup'\n\nexport const ApprovalPolicySchema = yup.object({\n    \"ApprovalPolicy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Locations\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().number('Only numbers').required('required'),\n            \"Minor\": yup.string().number('Only numbers').required('required')\n        }),\n        \"Approval Groups\": yup.array().of(\n            yup.string.required('required')\n        ),\n        \"Route Templates\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Rank\": yup.string().required('required'),\n                \"Record Types\":yup.array().of(\n                    yup.string.required('required')\n                ),\n                \"Levels\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Approvers\":yup.array().of(\n                            yup.string.required('required')\n                        ),\n                    })\n\n                )\n            })\n        )\n    })\n})\n","import * as React from \"react\";\nimport {useState} from \"react\";\nimport Constructor from \"./Constructor/Constructor\";\nimport ViewJson from \"./ViewJson/ViewJson\";\nimport './NewEditor.css'\nimport {ApprovalPolicySchema} from \"../../json/schemes/ApprovalPolicy\";\n\ninterface Props {\n    json: any\n}\n\nconst NewEditor: React.FC<Props> = ({json}) => {\n    const [formData, setFormData] = useState(json)\n\n    const yupSchema = ApprovalPolicySchema\n\n    const handleChange = (object) => {\n        setFormData(object)\n    }\n\n    return (\n        <div className='container'>\n            <div className='json-editor-window'>\n                <Constructor field={yupSchema} json={formData} onChange={handleChange}/>\n            </div>\n            <div>\n                <ViewJson data={formData}/>\n            </div>\n        </div>\n    )\n}\n\nexport default NewEditor\n","export const ApprovalPolicy ={\n    \"Approval Policy\":\n        {\n            \"Version\": \"Tx3 Demo 1.0.0.1\",\n            \"Schema\":\n                {\n                    \"ID\": \"http://tx3services.com/schemas/0/0/approval-policy.json\",\n                    \"Major\": \"0\",\n                    \"Minor\": \"0\"\n                },\n            \"Approval Groups\": [\n                \"Business\",\n                \"Quality\",\n                \"Technical\"\n            ],\n            \"Route Templates\": [\n                {\n                    \"Name\": \"GxP Defect Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [ \"Defect\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        },\n                        {\n                            \"Name\": \"Level 2\",\n                            \"Approvers\": [ \"Quality\" ]\n                        }\n                    ],\n                    \"Constraints\": [\n                        {\n                            \"Type\": \"Field Is One Of\",\n                            \"Name\": \"GxP\",\n                            \"Values\": [\"Y\"]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"Defect Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [ \"Defect\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"GxP Story Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [ \"Story\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        },\n                        {\n                            \"Name\": \"Level 2\",\n                            \"Approvers\": [ \"Quality\" ]\n                        }\n                    ],\n                    \"Constraints\": [\n                        {\n                            \"Type\": \"Field Is One Of\",\n                            \"Name\": \"GxP\",\n                            \"Values\": [\"Y\"]\n                        }\n                    ]\n                },            {\n                    \"Name\": \"Story Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [ \"Story\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"Issue Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [ \"Issue\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"GxP Test Run Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [\n                        \"Test Run\",\n                        \"XRay Execution\"\n                    ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        },\n                        {\n                            \"Name\": \"Level 2\",\n                            \"Approvers\": [ \"Quality\" ]\n                        }\n                    ],\n                    \"Constraints\": [\n                        {\n                            \"Type\": \"Field Is One Of\",\n                            \"Name\": \"GxP\",\n                            \"Values\": [\"Y\"]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"Test Run Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [\n                        \"Test Run\",\n                        \"XRay Execution\"\n                    ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\", \"Technical\" ]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \" GxP Test Case Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [\n                        \"Test Case\",\n                        \"XRay Test\",\n                        \"XRay Scenario\",\n                        \"XRay Generic Test\",\n                        \"XRay Manual Test\",\n                        \"XRay Pre-Condition\"\n                    ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Technical\", \"Business\" ]\n                        },\n                        {\n                            \"Name\": \"Level 2\",\n                            \"Approvers\": [\"Quality\"]\n                        }\n                    ],\n                    \"Constraints\": [\n                        {\n                            \"Type\": \"Field Is One Of\",\n                            \"Name\": \"GxP\",\n                            \"Values\": [\"Y\"]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \" Test Case Approval\",\n                    \"Rank\": \"1\",\n                    \"Record Types\": [\n                        \"Test Case\",\n                        \"XRay Test\",\n                        \"XRay Scenario\",\n                        \"XRay Generic Test\",\n                        \"XRay Manual Test\",\n                        \"XRay Pre-Condition\"\n                    ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Technical\", \"Business\" ]\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"Default Route Template\",\n                    \"Rank\": \"99\",\n                    \"Record Types\": [  \"General\" ],\n                    \"Levels\": [\n                        {\n                            \"Name\": \"Level 1\",\n                            \"Approvers\": [ \"Business\" ]\n                        }\n                    ]\n                }\n            ]\n        }\n}\n","import * as React from 'react';\nimport './MainWindow.css'\nimport NewEditor from \"../NewEditor/NewEditor\";\nimport {ApprovalPolicy} from \"../../json/ApprovalPolicy\";\n\n\n\nconst MainWindow: React.FC = () => {\n    return (\n        <div>\n            <NewEditor json={ApprovalPolicy}/>\n        </div>\n    )\n}\nexport default MainWindow\n","import MainWindow from \"./components/MainWindow/MainWindow\";\n\nconst App = () => <MainWindow/>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}