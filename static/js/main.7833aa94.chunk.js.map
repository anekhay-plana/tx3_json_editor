{"version":3,"sources":["components/NewEditor/Constructor/ObjectField/ObjectField.tsx","components/NewEditor/Constructor/ArrayField/ArrayField.tsx","components/NewEditor/Constructor/MixedField/MixedField.tsx","components/NewEditor/Constructor/StringField/StringField.tsx","components/NewEditor/Constructor/Constructor.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ObjectField/ObjectField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/helpers/index.js","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableObjects/TableObjects.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableStrings/TableStrings.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableMixedes/MixedField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/ItemsTable.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ArrayField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/StringtField/StringtField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/EditWindowConstructor.tsx","components/MainWindow/Button/Button.tsx","components/NewEditor/EditWindow/EditWindow.tsx","components/NewEditor/NewEditor.tsx","json/schemes/ApprovalPolicy.js","json/schemes/index.tsx","json/schemes/RecordsManagementPolicy.js","json/schemes/SynchronizationPolicy.js","components/Selector/Selector.tsx","components/MainWindow/helpers/index.tsx","components/ViewJson/ViewJson.tsx","components/Breadcrumbs/Breadcrumbs.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ObjectField","field","json","onChange","name","onClick","childName","searchWay","openPatent","way","parentWay","useState","open","setOpen","fields","Object","keys","useEffect","handleClickObject","openWhenChildOpen","indexOf","title","onChangeInObject","key","value","renderContent","filter","item","type","className","Boolean","length","map","i","ArrayField","handleClickArray","onChangeInArray","newArray","innerType","MixedField","props","variants","Array","from","list","changedSchema","findIndex","StringField","style","cursor","Constructor","renderField","nestingLevel","console","log","newObject","createObject","schema","newObj","TableObjects","removeItem","addItem","React","page","setPage","content","isArray","slice","object","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","TableStrings","ItemsTable","itemsType","renderArrayTable","handleClickItem","index","newContent","formik","useFormik","initialValues","label","validateOnBlur","validationSchema","yup","onSubmit","setFieldValue","TextField","fullWidth","values","e","handleChange","setFieldTouched","target","error","touched","errors","helperText","EditWindowConstructor","Button","text","EditWindow","onClickSearchWay","parentsWay","marginTop","NewEditor","yupSchema","selectedItem","setSelectedItem","ApprovalPolicySchema","required","url","of","oneOf","Schemes","Selector","selected","options","createEmptyJsonObject","ViewJson","data","changedObject","jsObject","locale","placeholder","confirmGood","width","height","labelColumn","display","Breadcrumbs","wayMap","split","targetWay","word","handleClick","MainWindow","publishRef","useRef","selectedSchema","setSelectedSchema","setJson","mod","setMod","setSearchWay","current","setAttribute","encodeURIComponent","JSON","stringify","handleClickCreateNewJson","htmlFor","id","file","files","reader","FileReader","readAsText","onload","selectedJson","parse","String","result","firstKey","forEach","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7833aa94.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport Constructor from \"../Constructor\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport './ObjectField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    childName?: string\n    searchWay: string\n    openPatent?: any\n    way?: string\n    parentWay?: string\n}\n\nconst ObjectField: React.FC<Props> = (\n    {\n        field,\n        json,\n        onChange,\n        name,\n        onClick,\n        childName,\n        searchWay,\n        openPatent,\n        way,\n        parentWay\n    }) => {\n\n    const [open, setOpen] = useState(name || childName ? false : true)\n    const fields = Object.keys(field.fields)\n    useEffect(()=>{\n        if(way===searchWay){\n            handleClickObject()\n        }\n    },[json])\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickObject()\n            openWhenChildOpen()\n        }\n    }, [searchWay])\n\n    const openWhenChildOpen = () => {\n        if (openPatent) {\n            openPatent()\n            setOpen(true)\n        }\n    }\n    useEffect(() => {\n        if (way?.indexOf('>') === -1) {\n            handleClickObject()\n        }\n    }, [field])\n\n    const title = childName ? childName : name\n\n    const handleClickObject = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way,parentWay)\n    }\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    const onChangeInObject = (key, value) => {\n        if (name || name === 0) {\n            onChange(name, {...json, [key]: value})\n        } else {\n            onChange({...json, [key]: value})\n        }\n    }\n\n    const renderContent = fields.filter((item) => field.fields[item].type !== 'string')\n\n    return (\n        <div className='object-container'>\n            {Boolean(title) &&\n            <div className='title'>\n                {Boolean(renderContent.length) &&\n                <ExpandMoreIcon\n                    onClick={onOpen}\n                    className={open ? 'rev-icon' : ''}\n                />\n                }\n                <div\n                    className={way === searchWay ? 'selected' : ''}\n                    onClick={handleClickObject}\n                >\n                    {title}\n                </div>\n            </div>\n            }\n            <div className={open ? 'object-child-container' : 'hidden'}>\n                {renderContent.map((item, i) =>\n                    <div key={i} className={'object-child-item'}>\n                        <Constructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            searchWay={searchWay}\n                            openPatent={openWhenChildOpen}\n                            way={way ? way + '>' + item : item}\n                        />\n                    </div>\n                )}\n            </div>\n\n        </div>\n    )\n}\n\nexport default ObjectField\n","import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Constructor from \"../Constructor\";\nimport './ArrayField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    searchWay: string\n    openPatent?: any\n    way?: string\n}\n\nconst ArrayField: React.FC<Props> = (\n    {\n        field,\n        json = [],\n        name,\n        onChange,\n        onClick,\n        searchWay,\n        openPatent,\n        way = ''\n    }) => {\n\n    const [open, setOpen] = useState(false)\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickArray()\n            openWhenChildOpen()\n        }\n    }, [searchWay])\n\n    useEffect(()=>{\n        if(searchWay==way){\n            handleClickArray()\n        }\n    },[json])\n\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n\n    const openWhenChildOpen = () => {\n        openPatent()\n        setOpen(true)\n    }\n\n    const handleClickArray = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n\n    const thisIsYourWay = () => {\n        if(field.innerType.type==='string'){\n            return searchWay.indexOf(way)+1\n        }\n        return way === searchWay\n    }\n\n    return (\n        <div className='array-container'>\n            <div className='title'>\n                {field.innerType.type !== 'string' &&\n                <ExpandMoreIcon onClick={onOpen} className={open ? 'rev-icon' : ''}/>\n                }\n                <div\n                    className={thisIsYourWay() ? 'selected' : ''}\n                    onClick={handleClickArray}\n                >\n                    {name}\n                </div>\n            </div>\n            <div>\n                <div className='array-child-container'>\n                    {json&&field.innerType.type!=='string'&&\n                    <div className={!open ? 'hidden' : ''}>\n                        {\n                            json.map((item, i) =>\n                                <div key={i} className='array-item'>\n                                    <div className={way ? 'line' : ''}>\n                                    </div>\n                                    <Constructor\n                                        field={field.innerType}\n                                        json={item}\n                                        childName={name + (i + 1)}\n                                        name={i}\n                                        onChange={onChangeInArray}\n                                        onClick={onClick}\n                                        searchWay={searchWay}\n                                        openPatent={openWhenChildOpen}\n                                        way={way + '>' + name + (i + 1)}\n                                        parentWay={way}\n                                    />\n                                </div>\n                            )}\n                    </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import * as React from \"react\";\nimport Constructor from \"../Constructor\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    childName?:string\n    searchWay: string\n    openPatent?: any\n    way?:string\n}\n\nconst MixedField: React.FC<Props> = (props) => {\n    const variants: any = Array.from(props.field['_whitelist'].list)\n    const changedSchema = variants.findIndex(item => item.type === typeof props.json)\n    return <Constructor {...props} field={variants[changedSchema]}/>\n}\n\nexport default MixedField\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    childName?: string\n    searchWay: string\n    openPatent?: any\n    way?: string\n    parentWay?: string\n}\n\nconst StringField: React.FC<Props> = (\n    {\n        field,\n        json,\n        onChange,\n        name,\n        onClick,\n        childName,\n        searchWay,\n        openPatent,\n        way,\n        parentWay\n    }) => {\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickObject()\n        }\n    }, [json])\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickObject()\n            openWhenChildOpen()\n        }\n    }, [searchWay])\n\n    const openWhenChildOpen = () => {\n        if (openPatent) {\n            openPatent()\n        }\n    }\n    useEffect(() => {\n        if (way?.indexOf('>') === -1) {\n            handleClickObject()\n        }\n    }, [field])\n\n    const title = childName ? childName : name\n\n    const handleClickObject = () => {\n        onClick(field, json, onChange, name, onClick, way, parentWay)\n    }\n\n\n    return (\n        <div\n            className={way === searchWay ? 'selected' : ''}\n            onClick={handleClickObject}\n            style={{cursor:'pointer'}}\n        >\n            {title}\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport MixedField from \"./MixedField/MixedField\";\nimport StringField from \"./StringField/StringField\";\n\nconst Constructor = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"mixed\":\n                return <MixedField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n}\n\nexport default Constructor\n","import EditWindowConstructor from \"../EditWindowConstructor\";\nimport * as React from \"react\";\nimport './ObjectField.css'\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    way: string\n    nestingLevel:number\n}\n\nconst ObjectField: React.FC<Props> = ({field, json, onChange, name,onClick,way,nestingLevel}) => {\n    console.log('LOOG', field)\n    const fields = Object.keys(field.fields)\n\n    const onChangeInObject = (key, value) => {\n        const newObject = new Object(json)\n        newObject[key] = value\n        if (name || name === 0) {\n            onChange(name, newObject)\n        } else {\n            onChange(newObject)\n        }\n    }\n\n    return (\n        <div className='object-edit-container'>\n            {Boolean(name && typeof name !== \"number\") &&\n            <div className='edit-title'>\n                <h2>\n                    {name}\n                </h2>\n            </div>\n            }\n                {fields.map((item, i) =>\n                    <div key={i} className='object-child-item-editor'>\n                        <EditWindowConstructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            way={way+'>'+ item}\n                            nestingLevel={nestingLevel+1}\n                        />\n                    </div>\n                )}\n        </div>\n    )\n}\n\nexport default ObjectField\n","export const createObject = (schema) => {\n    if(schema.type==='string'){\n        return ''\n    }\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createObject(schema[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: (schema:object) => void\n}\n\nconst TableObjects: React.FC<Props> = ({field, json, onClick, removeItem, addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n    const keys = Object.keys(field.fields)\n\n    const content = Array.isArray(json) ? json : []\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    {keys.map(item =>\n                        <td key={item}>{item}</td>\n                    )}\n                    <td className='buttons-field'>\n                        <u onClick={()=>addItem(field)} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((object, i) => (\n                            <tr key={'bob' + i}>\n                                {keys.map(item =>\n                                    <td key={item + i}>\n                                        {field.fields[item].type === 'string'\n                                            ? object[item]\n                                            : `[${field.fields[item].type}]`\n                                        }\n                                    </td>\n                                )}\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={() => onClick(object, page * rowsPerPage + i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableObjects\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: (schema:object) => void\n}\n\nconst TableStrings: React.FC<Props> = ({field, json,onClick,removeItem,addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n\n    const content = Array.isArray(json)? json:[]\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    <td></td>\n                    <td className='buttons-field'>\n                        <u onClick={()=>addItem(field)} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((item, i) => (\n                            <tr key={item + i}>\n                                <td >\n                                    {item}\n                                </td>\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={()=>onClick(item,page * rowsPerPage+i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableStrings\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: (schema: object) => void\n    name?:string\n}\n\nconst MixedField: React.FC<Props> = ({field, json, onClick, removeItem, addItem,name}) => {\n    const variants: any = Array.from(field['_whitelist'].list)\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n    const content = Array.isArray(json) ? json : []\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    return (\n        <>\n            <div>\n                <table>\n                    <thead>\n                    <tr>\n                        <td></td>\n                        <td className='buttons-field'>\n                            {variants.map((item,i) =>\n                                <u key={i} onClick={() => addItem(item)} className='array-button add'>\n                                    {\"add \" + item.type}\n                                </u>\n                            )}\n                        </td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {json\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        .map((item, i) => (\n                                <tr key={item + i}>\n                                    <td>\n                                        {(name||'') + (page * rowsPerPage + i)}({typeof item})\n                                    </td>\n                                    <td className='buttons-field'>\n                                        <u\n                                            onClick={() => onClick(item, page * rowsPerPage + i)}\n                                            className='array-button edit'\n                                        >\n                                            Edit\n                                        </u>\n                                        <u\n                                            onClick={() => removeItem(page * rowsPerPage + i)}\n                                            className='array-button delete'\n                                        >\n                                            Delete\n                                        </u>\n                                    </td>\n                                </tr>\n                            )\n                        )}\n                    </tbody>\n                </table>\n                {content.length > 5 &&\n                <TablePagination\n                    rowsPerPageOptions={[rowsPerPage]}\n                    component=\"div\"\n                    count={content.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                />\n                }\n            </div>\n        </>\n    )\n}\n\nexport default MixedField\n","import * as React from \"react\";\nimport TableObjects from \"./TableObjects/TableObjects\";\nimport TableStrings from \"./TableStrings/TableStrings\";\nimport MixedField from \"./TableMixedes/MixedField\";\nimport './ItemsTable.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: (schema:object) => void\n    name?:string\n}\n\nconst ItemsTable: React.FC<Props> = (props) => {\n    const itemsType = props.field.type\n    const renderArrayTable = () => {\n        switch (itemsType){\n            case 'string':\n                return <TableStrings {...props}/>\n            case 'object':\n                return <TableObjects {...props}/>\n            default:\n                return <MixedField {...props}/>\n        }\n    }\n    return renderArrayTable()\n\n}\n\nexport default ItemsTable\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\nimport './ArrayField.css'\nimport {createObject} from \"./helpers\";\nimport ItemsRows from \"./ItemsTable/ItemsTable\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    way: string\n    nestingLevel: number\n}\n\nconst ArrayField: React.FC<Props> = ({field, json = [], name, onChange, onClick, way, nestingLevel}) => {\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const handleClickAddItem = (schema) => {\n        const newContent = field.innerType.type === 'string' ? '' : createObject(schema)\n        const newArray = [...json, newContent]\n        const index = newArray.length-1\n        handleClickItem(newArray[index],index)\n        onChange(name, newArray)\n\n    }\n\n    const handleClickRemoveItem = (index) => {\n        const newArray = json.filter((item, i) => i !== index)\n        onChange(name, newArray)\n    }\n\n    const handleClickItem = (item, i) => {\n        onClick(field.innerType, item, onChangeInArray, i, onClick, way + '>' + name + (i + 1),way)\n    }\n\n    return (\n        <div className='array-edit-container'>\n            <div className='edit-title-array'>\n                <h2>{name}</h2>\n            </div>\n            <div>\n                <ItemsRows\n                    json={json}\n                    field={field.innerType}\n                    onClick={handleClickItem}\n                    removeItem={handleClickRemoveItem}\n                    addItem={handleClickAddItem}\n                    name={name}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import {TextField} from \"@material-ui/core\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\nimport {useEffect} from \"react\";\n\ninterface Props {\n    field: any\n    json?: any\n    name?: string|number\n    onChange: any\n}\n\nconst StringField: React.FC<Props> = ({field, json, name,onChange}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            label: typeof name === 'string'? name : '',\n            value: json\n        },\n        validateOnBlur: true,\n        validationSchema: yup.object({\n            'value':field\n        }),\n        onSubmit: () => {\n        }\n    });\n\n    useEffect(() => {\n        formik.setFieldValue('value', json)\n    }, [json])\n\n    const handleChange = (e) => {\n        formik.handleChange(e);\n        formik.setFieldTouched('value');\n        onChange(name,e.target.value)\n    }\n\n    return (\n        <div>\n            <TextField\n                fullWidth\n                name={'value'}\n                label={formik.values.label}\n                value={formik.values.value}\n                onChange={handleChange}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n                helperText={formik.touched.value && formik.errors.value}\n            />\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport StringField from \"./StringtField/StringtField\";\n\nconst EditWindowConstructor = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return (\n        <div>\n            {renderField()}\n        </div>\n    )\n }\n\n export default EditWindowConstructor\n","import * as React from 'react';\nimport './Button.css'\n\nconst Button = ({text, onClick}) =>\n        <button onClick={onClick} className='actions-button'>\n            {text}\n        </button>\n\nexport default Button\n","import * as React from \"react\";\nimport EditWindowConstructor from \"./EditWindowConstructor/EditWindowConstructor\";\nimport Button from \"../../MainWindow/Button/Button\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClickSearchWay: (string) => void\n    onChange?: any\n    way?: string\n    parentsWay?: string\n}\n\nconst EditWindow: React.FC<Props> = (props) => {\n    const {onClickSearchWay, parentsWay} = props\n    return (\n        <div>\n            <EditWindowConstructor {...props}/>\n            {parentsWay &&\n            <div style={{marginTop:'20px'}}>\n                <Button text={'Save'} onClick={() => onClickSearchWay(parentsWay)}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default EditWindow\n","import * as React from \"react\";\nimport { useState} from \"react\";\nimport Constructor from \"./Constructor/Constructor\";\nimport EditWindow from \"./EditWindow/EditWindow\";\nimport './NewEditor.css'\n\ninterface Props {\n    yupSchema: any\n    json: object\n    onChange: (object:object)=> void\n    searchWay:string\n    onClickSearchWay:(string)=> void\n}\n\nconst NewEditor: React.FC<Props> = ({yupSchema,json,onChange,searchWay,onClickSearchWay}) => {\n    const [selectedItem, setSelectedItem] = useState<object >()\n\n    const handleClickElement = (field, json, onChange, name, onClick,way,parentsWay) => {\n        onClickSearchWay(way)\n        const selected = {name, field, json, onChange, onClick,parentsWay}\n        setSelectedItem(selected)\n    }\n\n    return (\n        <div className='container'>\n            <div className='json-tree-window'>\n                <div>\n                    <Constructor\n                        field={yupSchema}\n                        json={json}\n                        onChange={onChange}\n                        onClick={handleClickElement}\n                        searchWay={searchWay}\n                    />\n                </div>\n            </div>\n\n            <div className='json-editor-window'>\n                {selectedItem &&\n                <EditWindow {...selectedItem} way={searchWay} onClickSearchWay={onClickSearchWay}/>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default NewEditor\n","import * as yup from 'yup'\n\n// const constraints = () => yup.array().of(\n//     yup.mixed().oneOf([\n//         yup.object({\n//             \"Type\": yup.string().oneOf(['Child Field Is One Of']),\n//             \"Name\": yup.string(),\n//             \"Ignore Case\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Value\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Name\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Value\": yup.string(),\n//             \"Ignore Case\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Value\": yup.string(),\n//             \"Ignore Case\": yup.string(),\n//             \"Delimiter\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Field\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"States\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Constraints\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Target\": yup.string(),\n//             \"Constraints\": yup.string()\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Allow If Not Linked\": yup.string(),\n//             \"All Linked Records Must Match\": yup.string(),\n//             \"Record Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Values\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Allow If Not Linked\": yup.string(),\n//             \"All Linked Records Must Match\": yup.string(),\n//             \"Record Type\": yup.string(),\n//             \"Name\": yup.string(),\n//             \"Values\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Role\": yup.string(),\n//         }),\n//         yup.object({\n//             \"Type\": yup.string(),\n//             \"Roles\": yup.string(),\n//         }),\n//     ])\n// )\n\nexport const ApprovalPolicySchema = yup.object({\n    \"Approval Policy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Approval Groups\": yup.array().of(\n            yup.mixed().oneOf([\n                yup.string().required('required'),\n                yup.object({\n                    \"Name\": yup.string().required('required'),\n                    \"Subgroups\": yup.array().of(\n                        yup.string().required('required')\n                    ),\n                })\n            ])),\n        \"Lock Task Order\": yup.string().required('required'),\n        \"Route Templates\": yup.array().of(\n            yup.object({\n                // 'Constraints':constraints(),\n                \"Name\": yup.string().required('required'),\n                \"Rank\": yup.string().required('required'),\n                \"Record Types\": yup.array().of(\n                    yup.string().required('required')\n                ),\n                'Prevent Author Approval': yup.string().required('required'),\n                'Lock Task Order': yup.string().required('required'),\n                \"Levels\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Approvers\": yup.array().of(\n                            yup.mixed().oneOf([\n                                yup.string().required('required'),\n                                yup.object({\n                                    \"Role\": yup.string().required('required'),\n                                    \"Field\": yup.string().required('required'),\n                                    \"Description\": yup.string().required('required'),\n                                    \"Lock Task Order\": yup.string().required('required'),\n                                    \"Delimiter\": yup.string().required('required')\n                                })\n                            ])\n                        ),\n                    })\n                )\n            })\n        )\n    })\n})\n","import {ApprovalPolicySchema} from \"./ApprovalPolicy\";\nimport {RecordsManagementPolicySchema} from \"./RecordsManagementPolicy\";\nimport {SynchronizationPolicySchema} from \"./SynchronizationPolicy\";\n\nconst Schemes = [\n    {\n        label:'Records Management Policy',\n        value: RecordsManagementPolicySchema\n    },\n    {\n        label:'Approval Policy',\n        value: ApprovalPolicySchema\n    },\n    {\n        label:'Synchronization Policy',\n        value: SynchronizationPolicySchema\n    },\n]\n\nexport default Schemes\n","import * as yup from 'yup'\n\nexport const RecordsManagementPolicySchema = yup.object({\n    \"Records Management Policy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Record Types\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Definitions\": yup.array().of(\n                    yup.object({\n                        \"Systems\": yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Aliases\": yup.array().of(\n                            yup.object({\n                                \"Policy Field\": yup.string().required('required'),\n                                \"System Field\": yup.string().required('required')\n                            })\n                        ),\n                        \"Item Types\": yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Singular Name\": yup.string().required('required'),\n                        \"Plural Name\": yup.string().required('required'),\n                        \"Ownership Description\": yup.string().required('required'),\n                        \"Content Originator\": yup.string().required('required'),\n                        'Details': yup.array().of(\n                            yup.object({\n                                \"Default\": yup.string().required('required'),\n                                \"Fields\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Actions\": yup.array().of(\n                                    yup.string().required('required')\n                                )\n                            })\n                        ),\n                    })\n                ),\n                \"Default Route Template\": yup.string().required('required'),\n                'Allow Verify Signatures': yup.string().required('required'),\n                \"Editors\": yup.array().of(\n                    yup.string().required('required')\n                ),\n                'State Field': yup.string().required('required'),\n                \"States\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Default\": yup.string().required('required'),\n                        \"Prerequisites\": yup.array().of(\n                            yup.object({\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        ),\n                        'Field Updates': yup.array().of(\n                            yup.object({\n                                'Name': yup.string().required('required'),\n                                'Value': yup.string().required('required'),\n                            })\n                        ),\n                        'Edit Rules': yup.array().of(\n                            yup.object({\n                                'Is Editable': yup.string().required('required'),\n                                'Roles': yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        ),\n                        'Is Editable': yup.string().required('required'),\n                        'Field Exceptions':yup.array().of(\n                            yup.object({\n                                'Is Editable': yup.string().required('required'),\n                                \"Fields\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Roles\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        ),\n                        'Action Exceptions':  yup.array().of(\n                            yup.object({\n                                'Is Allowed': yup.string().required('required'),\n                                \"Actions\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Roles\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        )\n                    })\n                ),\n                \"Fields\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Is Data\": yup.string().required('required'),\n                        'Default Value': yup.string().required('required'),\n                        \"Displays Signatures For\": yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Displays Route Info For\": yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Initialize\": yup.object({\n                            'Related Entity': yup.string().required('required'),\n                            'Field': yup.string().required('required'),\n                        }),\n                        'Reset on Copy': yup.string().required('required'),\n                        'Log Mode': yup.string().required('required'),\n                        'Edit Rules': yup.array().of(\n                            yup.object({\n                                'Is Editable': yup.string().required('required'),\n                                \"Roles\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        ),\n                        'Update Rules': yup.array().of(\n                            yup.object({\n                                'Is Allowed': yup.string().required('required'),\n                                \"Values\": yup.array().of(\n                                    yup.string().required('required')\n                                ),\n                                \"Constraints\": yup.array().of(\n                                    yup.object({\n                                        \"Type\": yup.string().required('required'),\n                                        \"Name\": yup.string().required('required'),\n                                        \"Values\": yup.array().of(\n                                            yup.string().required('required')\n                                        )\n                                    })\n                                )\n                            })\n                        )\n                    })\n                )\n            })\n        )\n    })\n})\n","import * as yup from 'yup'\n\nexport const SynchronizationPolicySchema = yup.object({\n    \"Synchronization Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Locations\": yup.array().of(\n            yup.object({\n                \"System\": yup.string().required('required'),\n                \"Name\": yup.string().required('required'),\n                \"Server\": yup.string()\n                    .url('Enter valid url')\n                    .required('required'),\n                \"Service Account\": yup.string().required('required'),\n                \"Service Password\": yup.string().required('required'),\n                \"Urls\": yup.object({\n                    \"Browser\":yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                    \"API\": yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                })\n            })\n        )\n    })\n})\n","import * as React from 'react';\nimport Select from \"react-select\";\nimport './Selector.css'\n\ninterface ArrayItem {\n    label: string\n    value: object\n}\n\ninterface ProfilesProps {\n    variants: Array<ArrayItem>\n    handleChange: (selectedOption:ArrayItem|null) => void\n    selected: ArrayItem|null\n}\n\nconst Selector:React.FC<ProfilesProps> = ({variants, handleChange, selected}) => {\n\n\n    return(\n        <div className='selector-container'>\n            <Select\n                className='selector'\n                value={selected}\n                onChange={handleChange}\n                options={variants}\n            />\n        </div>\n    )\n}\nexport default  Selector\n","export const createEmptyJsonObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createEmptyJsonObject(schema.fields[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport './ViewJson.css'\n\ninterface Props {\n    data: object\n    onChange: (object:object)=>void\n}\n\nconst ViewJson: React.FC<Props>  = ({ data, onChange}) => {\n\n    const changeOnView = (e:any) => {\n        const changedObject = e.jsObject\n        onChange(changedObject)\n    }\n\n    return (\n        <div className='json-display-window'>\n            <div>\n                <JSONInput\n                    onChange={changeOnView}\n                    locale={locale}\n                    placeholder={data}\n                    confirmGood={false}\n                    width='100%'\n                    height='100%'\n                    style={{labelColumn:{display:'none'}}}\n                />\n            </div>\n        </div>\n    )\n\n}\nexport default ViewJson\n","import './Breadcrumbs.css'\n\ninterface Props {\n    onClickSearchWay?: any\n    way?: any\n}\n\nconst Breadcrumbs: React.FC<Props> = (props) => {\n    const wayMap = props.way.split('>')\n\n    const handleClick = (i) => {\n        let targetWay = ''\n        for(let word=0; word<=i;word++){\n            targetWay=targetWay+wayMap[word]+'>'\n        }\n        props.onClickSearchWay(targetWay.slice(0,-1))\n    }\n\n    return (\n        <div className='boba'>\n            {wayMap.map((item,i)=>\n                <div\n                    key={i}\n                    className='breadcrumbs-word'\n                    onClick={()=>handleClick(i)}\n                >\n                    {item+(i === wayMap.length-1?'':'>')}\n                </div>\n\n            )}\n        </div>\n    )\n}\n\nexport default Breadcrumbs\n","import * as React from 'react';\nimport NewEditor from \"../NewEditor/NewEditor\";\nimport Schemes from \"../../json/schemes\";\nimport Selector from \"../Selector/Selector\";\nimport {createEmptyJsonObject} from \"./helpers\";\nimport {useEffect, useRef, useState} from \"react\";\nimport Button from \"./Button/Button\";\nimport ViewJson from \"../ViewJson/ViewJson\";\nimport Breadcrumbs from \"../Breadcrumbs/Breadcrumbs\";\nimport './MainWindow.css'\n\n\nconst MainWindow: React.FC = () => {\n    const publishRef: any = useRef();\n    const [selectedSchema, setSelectedSchema] = React.useState<any>(Schemes[1])\n    const [json, setJson] = React.useState<any>(createEmptyJsonObject(Schemes[1].value))\n    const [mod, setMod] = useState('editor')\n    const [searchWay, setSearchWay] = useState('')\n\n\n    const handleChangeSelector = (e) => {\n        setSelectedSchema(e)\n    }\n\n    const onClickSearchWay = (way) => {\n        setSearchWay(way)\n    }\n\n    const handleChange = (object) => {\n        setJson(object)\n    }\n\n    useEffect(() => {\n        const {current} = publishRef;\n        if (!current) {\n            return;\n        }\n        current.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json, null, 2)));\n        current.setAttribute('download', `${selectedSchema.label}.json`);\n    }, [json])\n\n    useEffect(() => {\n        handleClickCreateNewJson()\n    }, [selectedSchema])\n\n    const handleClickCreateNewJson = () => {\n        setJson(createEmptyJsonObject(selectedSchema.value))\n    }\n\n    const handleChangeFile = (event) => {\n        const file = event.target.files[0];\n        let reader = new FileReader();\n\n        reader.readAsText(file);\n\n        reader.onload = function () {\n            const selectedJson = JSON.parse(String(reader.result))\n            const firstKey = Object.keys(selectedJson)[0]\n            console.log('selectedJson', selectedJson)\n            Schemes.forEach((item, i) => {\n                    if (item.label === firstKey) {\n                        setJson(selectedJson)\n                        setSelectedSchema(Schemes[i])\n                    }\n                }\n            )\n        };\n    }\n    return (\n        <div className='main-container'>\n            <div className='actions'>\n                <Selector variants={Schemes} handleChange={handleChangeSelector} selected={selectedSchema}/>\n                <Button text={'Create'} onClick={handleClickCreateNewJson}/>\n                or\n                <div className='add-input'>\n                    <label htmlFor=\"upload-photo\">Browse for a file...\n                        <input type=\"file\" name=\"photo\" id=\"upload-photo\" onChange={handleChangeFile}/>\n                    </label>\n                </div>\n                <div className='publish'>\n                    <a ref={publishRef}>\n                        <Button text={'Publish'} onClick={() => {\n                        }}/>\n                    </a>\n                </div>\n            </div>\n            <div>\n                <div className='mod-selector'>\n                    <div\n                        className={mod === 'editor' ? 'mod-selector-button selected-mod' : 'mod-selector-button'}\n                        onClick={() => setMod('editor')}\n                    >\n                        editor\n                    </div>\n                    <div\n                        className={mod === 'json' ? 'mod-selector-button selected-mod' : 'mod-selector-button'}\n                        onClick={() => setMod('json')}\n                    >\n                        json\n                    </div>\n                    <Breadcrumbs way={searchWay} onClickSearchWay={onClickSearchWay}/>\n                </div>\n                {mod === 'editor'\n                    ? <NewEditor yupSchema={selectedSchema.value}\n                                 json={json}\n                                 onChange={handleChange}\n                                 searchWay={searchWay}\n                                 onClickSearchWay={onClickSearchWay}\n                    />\n                    : <ViewJson data={json} onChange={handleChange}/>\n                }\n            </div>\n        </div>\n    )\n}\nexport default MainWindow\n","import MainWindow from \"./components/MainWindow/MainWindow\";\nimport './App.css'\n\nconst App = () => <MainWindow/>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}