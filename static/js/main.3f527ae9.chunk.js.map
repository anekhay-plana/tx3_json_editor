{"version":3,"sources":["components/NewEditor/Constructor/ObjectField/ObjectField.tsx","components/NewEditor/Constructor/ArrayField/ArrayField.tsx","components/NewEditor/Constructor/Constructor.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ObjectField/ObjectField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/helpers/index.js","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableObjects/TableObjects.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableStrings/TableStrings.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/ItemsTable.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ArrayField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/StringtField/StringtField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/EditWindowConstructor.tsx","components/NewEditor/EditWindow/Breadcrumbs/Breadcrumbs.tsx","components/NewEditor/EditWindow/EditWindow.tsx","components/NewEditor/NewEditor.tsx","json/schemes/ApprovalPolicy.js","json/schemes/index.tsx","json/schemes/RecordsManagementPolicy.js","json/schemes/SynchronizationPolicy.js","components/Selector/Selector.tsx","components/MainWindow/helpers/index.tsx","components/MainWindow/Button/Button.tsx","components/ViewJson/ViewJson.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ObjectField","field","json","onChange","name","onClick","childName","searchWay","openPatent","way","useState","open","setOpen","fields","Object","keys","console","log","useEffect","handleClickObject","openWhenChildOpen","indexOf","title","onChangeInObject","key","value","renderContent","filter","item","type","className","Boolean","length","map","i","ArrayField","handleClickArray","onChangeInArray","newArray","innerType","Constructor","props","renderField","forEach","newObject","createObject","schema","newObj","TableObjects","removeItem","addItem","React","page","setPage","content","Array","isArray","slice","object","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","TableStrings","ItemsTable","itemsType","handleClickItem","index","push","StringField","formik","useFormik","initialValues","label","validateOnBlur","validationSchema","yup","onSubmit","setFieldValue","TextField","fullWidth","values","e","handleChange","setFieldTouched","target","error","touched","errors","helperText","EditWindowConstructor","style","marginTop","marginBottom","Breadcrumbs","wayMap","split","targetWay","word","onClickSearchWay","handleClick","EditWindow","NewEditor","yupSchema","selectedItem","setSelectedItem","setSearchWay","ApprovalPolicySchema","required","url","of","Schemes","Selector","variants","selected","options","createEmptyJsonObject","Button","text","ViewJson","data","plainText","locale","placeholder","confirmGood","width","height","labelColumn","display","MainWindow","publishRef","useRef","selectedSchema","setSelectedSchema","setJson","mod","setMod","current","setAttribute","encodeURIComponent","JSON","stringify","handleClickCreateNewJson","file","files","reader","FileReader","readAsText","onload","selectedJson","parse","String","result","firstKey","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f527ae9.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport Constructor from \"../Constructor\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport './ObjectField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    childName?: string\n    searchWay: string\n    openPatent?: any\n    way?: string\n}\n\nconst ObjectField: React.FC<Props> = (\n    {\n        field,\n        json,\n        onChange,\n        name,\n        onClick,\n        childName,\n        searchWay,\n        openPatent,\n        way\n    }) => {\n\n    const [open, setOpen] = useState(name || childName ? false : true)\n    const fields = Object.keys(field.fields)\n    console.log('way', way)\n    useEffect(()=>{\n        if(way===searchWay){\n            handleClickObject()\n        }\n    },[json])\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickObject()\n            openWhenChildOpen()\n        }\n    }, [searchWay])\n\n    const openWhenChildOpen = () => {\n        if (openPatent) {\n            openPatent()\n            setOpen(true)\n        }\n    }\n    useEffect(() => {\n        if (way?.indexOf('>') === -1) {\n            handleClickObject()\n        }\n    }, [field])\n\n    const title = childName ? childName : name\n\n    const handleClickObject = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    const onChangeInObject = (key, value) => {\n        if (name || name === 0) {\n            onChange(name, {...json, [key]: value})\n        } else {\n            onChange({...json, [key]: value})\n        }\n    }\n\n    const renderContent = fields.filter((item) => field.fields[item].type !== 'string')\n\n    return (\n        <div className='object-container'>\n            {Boolean(title) &&\n            <div className='title'>\n                {Boolean(renderContent.length) &&\n                <ExpandMoreIcon\n                    onClick={onOpen}\n                    className={open ? 'rev-icon' : ''}\n                />\n                }\n                <div\n                    className={way === searchWay ? 'selected' : ''}\n                    onClick={handleClickObject}\n                >\n                    {title}\n                </div>\n            </div>\n            }\n            <div className={open ? 'object-child-container' : 'hidden'}>\n                {renderContent.map((item, i) =>\n                    <div key={i} className={'object-child-item'}>\n                        <Constructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            searchWay={searchWay}\n                            openPatent={openWhenChildOpen}\n                            way={way ? way + '>' + item : item}\n                        />\n                    </div>\n                )}\n            </div>\n\n        </div>\n    )\n}\n\nexport default ObjectField\n","import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Constructor from \"../Constructor\";\nimport './ArrayField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    searchWay: string\n    openPatent?: any\n    way?: string\n}\n\nconst ArrayField: React.FC<Props> = (\n    {\n        field,\n        json = [],\n        name,\n        onChange,\n        onClick,\n        searchWay,\n        openPatent,\n        way = ''\n    }) => {\n\n    const [open, setOpen] = useState(false)\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    useEffect(() => {\n        if (way === searchWay) {\n            handleClickArray()\n            openWhenChildOpen()\n        }\n    }, [searchWay])\n\n    useEffect(()=>{\n        if(searchWay==way){\n            handleClickArray()\n        }\n    },[json])\n\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n\n    const openWhenChildOpen = () => {\n        openPatent()\n        setOpen(true)\n    }\n\n    const handleClickArray = () => {\n        setOpen(true)\n        onClick(field, json, onChangeInArray, name, onClick, way)\n    }\n\n    const thisIsYourWay = () => {\n        if(field.innerType.type==='string'){\n            return searchWay.indexOf(way)+1\n        }\n        return way === searchWay\n    }\n\n    return (\n        <div className='array-container'>\n            <div className='title'>\n                {field.innerType.type !== 'string' &&\n                <ExpandMoreIcon onClick={onOpen} className={open ? 'rev-icon' : ''}/>\n                }\n                <div\n                    className={thisIsYourWay() ? 'selected' : ''}\n                    onClick={handleClickArray}\n                >\n                    {name}\n                </div>\n            </div>\n            <div>\n                <div className='array-child-container'>\n                    {json&&field.innerType.type!=='string'&&\n                    <div className={!open ? 'hidden' : ''}>\n                        {\n                            json.map((item, i) =>\n                                <div key={i} className='array-item'>\n                                    <div className={way ? 'line' : ''}>\n                                    </div>\n                                    <Constructor\n                                        field={field.innerType}\n                                        json={item}\n                                        childName={name + (i + 1)}\n                                        name={i}\n                                        onChange={onChangeInArray}\n                                        onClick={onClick}\n                                        searchWay={searchWay}\n                                        openPatent={openWhenChildOpen}\n                                        way={way + '>' + name + (i + 1)}\n                                    />\n                                </div>\n                            )}\n                    </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    childName?:string\n    searchWay: string\n    openPatent?: any\n    way?:string\n}\n\nconst Constructor: React.FC<Props> = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n}\n\nexport default Constructor\n","import EditWindowConstructor from \"../EditWindowConstructor\";\nimport * as React from \"react\";\nimport './ObjectField.css'\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    way: string\n}\n\nconst ObjectField: React.FC<Props> = ({field, json, onChange, name,onClick,way}) => {\n    const fields = Object.keys(field.fields)\n\n    const checkFields = () => {\n        fields.forEach(item => {\n            if (!json[item]){\n                onChangeInObject(item,[])\n            }\n        })\n    }\n\n    useEffect(()=> {\n        checkFields()\n    },[])\n\n    const onChangeInObject = (key, value) => {\n        const newObject = new Object(json)\n        newObject[key] = value\n        if (name || name === 0) {\n            onChange(name, newObject)\n        } else {\n            onChange(newObject)\n        }\n    }\n\n    return (\n        <div className='object-container'>\n            {Boolean(name && typeof name !== \"number\") &&\n            <div className='edit-title'>\n                <h2>\n                    {name}\n                </h2>\n            </div>\n            }\n                {fields.map((item, i) =>\n                    <div key={i} className='.object-child-item-editor'>\n                        <EditWindowConstructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            way={way+'>'+ item}\n                        />\n                    </div>\n                )}\n        </div>\n    )\n}\n\nexport default ObjectField\n","export const createObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createObject(schema[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: () => void\n}\n\nconst TableObjects: React.FC<Props> = ({field, json, onClick, removeItem, addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n    const keys = Object.keys(field.fields)\n\n    const content = Array.isArray(json) ? json : []\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    {keys.map(item =>\n                        <td key={item}>{item}</td>\n                    )}\n                    <td className='buttons-field'>\n                        <u onClick={addItem} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((object, i) => (\n                            <tr key={'bob' + i}>\n                                {keys.map(item =>\n                                    <td key={item + i}>\n                                        {field.fields[item].type === 'string'\n                                            ? object[item]\n                                            : field.fields[item].type\n                                        }\n                                    </td>\n                                )}\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={() => onClick(object, page * rowsPerPage + i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableObjects\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: () => void\n}\n\nconst TableStrings: React.FC<Props> = ({json,onClick,removeItem,addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n\n    const content = Array.isArray(json)? json:[]\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    <td></td>\n                    <td className='buttons-field'>\n                        <u onClick={addItem} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((item, i) => (\n                            <tr key={item + i}>\n                                <td >\n                                    {item}\n                                </td>\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={()=>onClick(item,page * rowsPerPage+i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableStrings\n","import * as React from \"react\";\nimport TableObjects from \"./TableObjects/TableObjects\";\nimport TableStrings from \"./TableStrings/TableStrings\";\nimport './ItemsTable.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem:()=>void\n}\n\nconst ItemsTable: React.FC<Props> = (props) => {\n    const itemsType = props.field.type\n    return (\n        <div>\n        {itemsType === 'object'\n            ? <TableObjects {...props}/>\n            : <TableStrings {...props}/>\n        }\n        </div>\n    )\n\n}\n\nexport default ItemsTable\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\nimport './ArrayField.css'\nimport {createObject} from \"./helpers\";\nimport ItemsRows from \"./ItemsTable/ItemsTable\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    way: string\n}\n\nconst ArrayField: React.FC<Props> = ({field, json = [], name, onChange, onClick, way}) => {\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const handleClickAddItem = () => {\n        const newArray = [...json]\n        if (field.innerType.type === 'string') {\n            newArray.push('')\n        } else {\n            const newObj = createObject(field.innerType)\n            newArray.push(newObj)\n        }\n        handleClickItem(newArray, newArray.length-1)\n        onChange(name, newArray)\n    }\n\n    const handleClickRemoveItem = (index) => {\n        const newArray = json.filter((item, i) => i !== index)\n        onChange(name, newArray)\n    }\n\n    const handleClickItem = (item, i) => {\n        onClick(field.innerType, item, onChangeInArray, i, onClick, way+'>'+name + (i + 1))\n    }\n\n    return (\n        <div className='array-edit-container'>\n            <div className='edit-title'>\n                <h2>{name}</h2>\n            </div>\n            <div>\n                <ItemsRows\n                    json={json}\n                    field={field.innerType}\n                    onClick={handleClickItem}\n                    removeItem={handleClickRemoveItem}\n                    addItem={handleClickAddItem}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import {TextField} from \"@material-ui/core\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\nimport {useEffect} from \"react\";\n\ninterface Props {\n    field: any\n    json?: any\n    name?: string|number\n    onChange: any\n}\n\nconst StringField: React.FC<Props> = ({field, json, name,onChange}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            label: typeof name === 'string'? name : '',\n            value: json\n        },\n        validateOnBlur: true,\n        validationSchema: yup.object({\n            'value':field\n        }),\n        onSubmit: () => {\n        }\n    });\n\n    useEffect(() => {\n        formik.setFieldValue('value', json)\n    }, [json])\n\n    const handleChange = (e) => {\n        formik.handleChange(e);\n        formik.setFieldTouched('value');\n        onChange(name,e.target.value)\n    }\n\n    return (\n        <div>\n            <TextField\n                fullWidth\n                name={'value'}\n                label={formik.values.label}\n                value={formik.values.value}\n                onChange={handleChange}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n                helperText={formik.touched.value && formik.errors.value}\n            />\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport StringField from \"./StringtField/StringtField\";\n\nconst EditWindowConstructor = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return (\n        <div style={{marginTop: '10px', marginBottom: '10px' }}>\n            {renderField()}\n        </div>\n    )\n }\n\n export default EditWindowConstructor\n","import './Breadcrumbs.css'\n\ninterface Props {\n    onClickSearchWay?: any\n    way?: any\n}\n\nconst Breadcrumbs: React.FC<Props> = (props) => {\n    const wayMap = props.way.split('>')\n\n    const handleClick = (i) => {\n        let targetWay = ''\n        for(let word=0; word<=i;word++){\n            targetWay=targetWay+wayMap[word]+'>'\n        }\n        props.onClickSearchWay(targetWay.slice(0,-1))\n    }\n\n    return (\n        <div className='boba'>\n            {wayMap.map((item,i)=>\n                <div\n                    className='breadcrumbs-word'\n                    onClick={()=>handleClick(i)}\n                >\n                    {item+'>'}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Breadcrumbs\n","import * as React from \"react\";\nimport EditWindowConstructor from \"./EditWindowConstructor/EditWindowConstructor\";\nimport Breadcrumbs from \"./Breadcrumbs/Breadcrumbs\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClickSearchWay: (string)=>void\n    onChange?: any\n    way?: string\n}\n\nconst EditWindow: React.FC<Props> = (props) => {\n    return (\n        <div>\n            <Breadcrumbs {...props}/>\n            <EditWindowConstructor {...props}/>\n        </div>\n    )\n}\n\nexport default EditWindow\n","import * as React from \"react\";\nimport { useState} from \"react\";\nimport Constructor from \"./Constructor/Constructor\";\nimport EditWindow from \"./EditWindow/EditWindow\";\nimport './NewEditor.css'\n\ninterface Props {\n    yupSchema: any\n    json: object\n    onChange: (object:object)=> void\n}\n\nconst NewEditor: React.FC<Props> = ({yupSchema,json,onChange}) => {\n    const [selectedItem, setSelectedItem] = useState<object >()\n    const [searchWay, setSearchWay] = useState('')\n\n\n    const handleClickElement = (field, json, onChange, name, onClick,way) => {\n        setSearchWay(way)\n        const selected = {name, field, json, onChange, onClick}\n        setSelectedItem(selected)\n    }\n\n    const onClickSearchWay = (way) =>{\n        setSearchWay(way)\n    }\n\n    return (\n        <div className='container'>\n            <div className='json-tree-window'>\n                <div>\n                    <Constructor\n                        field={yupSchema}\n                        json={json}\n                        onChange={onChange}\n                        onClick={handleClickElement}\n                        searchWay={searchWay}\n                    />\n                </div>\n            </div>\n\n            <div className='json-editor-window'>\n                {selectedItem &&\n                <EditWindow {...selectedItem} way={searchWay} onClickSearchWay={onClickSearchWay}/>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default NewEditor\n","import * as yup from 'yup'\n\nexport const ApprovalPolicySchema = yup.object({\n    \"Approval Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Approval Groups\": yup.array().of(\n            yup.string().required('required')\n        ),\n        \"Route Templates\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Rank\": yup.string().required('required'),\n                \"Record Types\":yup.array().of(\n                    yup.string().required('required')\n                ),\n                \"Levels\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Approvers\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                    })\n\n                )\n            })\n        )\n    })\n})\n","import {ApprovalPolicySchema} from \"./ApprovalPolicy\";\nimport {RecordsManagementPolicySchema} from \"./RecordsManagementPolicy\";\nimport {SynchronizationPolicySchema} from \"./SynchronizationPolicy\";\n\nconst Schemes = [\n    {\n        label:'Records Management Policy',\n        value: RecordsManagementPolicySchema\n    },\n    {\n        label:'Approval Policy',\n        value: ApprovalPolicySchema\n    },\n    {\n        label:'Synchronization Policy',\n        value: SynchronizationPolicySchema\n    },\n]\n\nexport default Schemes\n","import * as yup from 'yup'\n\nexport const RecordsManagementPolicySchema = yup.object({\n    \"Records Management Policy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Record Types\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Definitions\": yup.array().of(\n                    yup.object({\n                        \"Systems\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Aliases\":yup.array().of(\n                            yup.object({\n                                \"Policy Field\": yup.string().required('required'),\n                                \"System Field\":yup.string().required('required')\n                            })\n                        ),\n                        \"Item Types\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Singular Name\": yup.string().required('required'),\n                        \"Plural Name\": yup.string().required('required'),\n                        \"Ownership Description\": yup.string().required('required'),\n                        \"Content Originator\": yup.string().required('required'),\n                    })\n                ),\n                \"Fields\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Is Data\": yup.string().required('required')\n                    })\n                )\n            })\n        )\n    })\n})\n","import * as yup from 'yup'\n\nexport const SynchronizationPolicySchema = yup.object({\n    \"Synchronization Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Locations\": yup.array().of(\n            yup.object({\n                \"System\": yup.string().required('required'),\n                \"Name\": yup.string().required('required'),\n                \"Server\": yup.string()\n                    .url('Enter valid url')\n                    .required('required'),\n                \"Service Account\": yup.string().required('required'),\n                \"Service Password\": yup.string().required('required'),\n                \"Urls\": yup.object({\n                    \"Browser\":yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                    \"API\": yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                })\n            })\n        )\n    })\n})\n","import * as React from 'react';\nimport Select from \"react-select\";\nimport './Selector.css'\n\ninterface ArrayItem {\n    label: string\n    value: object\n}\n\ninterface ProfilesProps {\n    variants: Array<ArrayItem>\n    handleChange: (selectedOption:ArrayItem|null) => void\n    selected: ArrayItem|null\n}\n\nconst Selector:React.FC<ProfilesProps> = ({variants, handleChange, selected}) => {\n    return(\n        <div className='selector-container'>\n            <Select\n                value={selected}\n                onChange={handleChange}\n                options={variants}\n            />\n        </div>\n    )\n}\nexport default  Selector\n","export const createEmptyJsonObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        console.log('LOOG', schema.fields[key].type)\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createEmptyJsonObject(schema.fields[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from 'react';\nimport './Button.css'\n\nconst Button = ({text, onClick}) => {\n\n    return (\n        <button onClick={onClick} className='actions-button'>\n            {text}\n        </button>\n    )\n}\nexport default Button\n","import * as React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport './ViewJson.css'\n\ninterface Props {\n    data: object\n    onChange?: any\n}\n\nconst ViewJson: React.FC<Props>  = ({ data, onChange}) => {\n\n    const bob = (e:any) => {\n        onChange(e.plainText)\n    }\n\n    return (\n        <div className='json-display-window'>\n            <div>\n                <JSONInput\n                    onChange={bob}\n                    locale={locale}\n                    placeholder={data}\n                    confirmGood={false}\n                    width='100%'\n                    height='100%'\n                    style={{labelColumn:{display:'none'}}}\n                />\n            </div>\n        </div>\n    )\n\n}\nexport default ViewJson\n","import * as React from 'react';\nimport NewEditor from \"../NewEditor/NewEditor\";\nimport Schemes from \"../../json/schemes\";\nimport Selector from \"../Selector/Selector\";\nimport {createEmptyJsonObject} from \"./helpers\";\nimport {useEffect, useRef, useState} from \"react\";\nimport Button from \"./Button/Button\";\nimport './MainWindow.css'\nimport ViewJson from \"../ViewJson/ViewJson\";\n\n\nconst MainWindow: React.FC = () => {\n    const publishRef: any = useRef();\n    const [selectedSchema, setSelectedSchema] = React.useState<any>(Schemes[0])\n    const [json, setJson] = React.useState<any>(createEmptyJsonObject(selectedSchema.value))\n    const [mod, setMod] = useState('editor')\n\n    const handleChangeSelector = (e) => {\n        setSelectedSchema(e)\n    }\n\n    const handleChange = (object) => {\n        setJson(object)\n    }\n\n    useEffect(() => {\n        const {current} = publishRef;\n        if (!current) {\n            return;\n        }\n        current.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json, null, 2)));\n        current.setAttribute('download', `${selectedSchema.label}.json`);\n    }, [json])\n\n    useEffect(() => {\n        handleClickCreateNewJson()\n    }, selectedSchema)\n\n    const handleClickCreateNewJson = () => {\n        setJson(createEmptyJsonObject(selectedSchema.value))\n    }\n\n    const handleChangeFile = (event) => {\n        const file = event.target.files[0];\n        let reader = new FileReader();\n\n        reader.readAsText(file);\n\n        reader.onload = function () {\n            const selectedJson = JSON.parse(String(reader.result))\n            const firstKey = Object.keys(selectedJson)[0]\n            Schemes.forEach((item, i) => {\n                    if (item.label === firstKey) {\n                        setJson(selectedJson)\n                        setSelectedSchema(Schemes[i])\n                    }\n                }\n            )\n        };\n    }\n    return (\n        <>\n            <div className='actions'>\n                <Selector variants={Schemes} handleChange={handleChangeSelector} selected={selectedSchema}/>\n                <Button text={'Create'} onClick={handleClickCreateNewJson}/>\n                or\n                <div className='add-input'>\n                    <input type='file' onChange={handleChangeFile}/>\n                </div>\n                <div className='publish'>\n                    <a ref={publishRef}>\n                        <Button text={'Publish'} onClick={() => {\n                        }}/>\n                    </a>\n                </div>\n            </div>\n            <div>\n                <div className='mod-selector'>\n                    <div\n                        className={mod ==='editor' ?'mod-selector-button selected-mod':'mod-selector-button'}\n                        onClick={()=>setMod('editor')}\n                    >\n                        editor\n                    </div>\n                    <div\n                        className={mod ==='json' ?'mod-selector-button selected-mod':'mod-selector-button'}\n                        onClick={()=>setMod('json')}\n                    >\n                        json\n                    </div>\n                </div>\n            {mod==='editor'\n                ? <NewEditor yupSchema={selectedSchema.value} json={json} onChange={handleChange}/>\n                : <ViewJson data={json} onChange={handleChange}/>\n            }\n            </div>\n        </>\n    )\n}\nexport default MainWindow\n","import MainWindow from \"./components/MainWindow/MainWindow\";\nimport './App.css'\n\nconst App = () => <MainWindow/>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}