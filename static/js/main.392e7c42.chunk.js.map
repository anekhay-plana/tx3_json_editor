{"version":3,"sources":["components/NewEditor/Constructor/ObjectField/ObjectField.tsx","components/NewEditor/Constructor/ArrayField/ArrayField.tsx","components/NewEditor/Constructor/Constructor.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ObjectField/ObjectField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/helpers/index.js","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableObjects/TableObjects.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableStrings/TableStrings.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/ItemsTable.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ArrayField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/StringtField/StringtField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/EditWindowConstructor.tsx","components/NewEditor/EditWindow/EditWindow.tsx","components/NewEditor/NewEditor.tsx","json/schemes/ApprovalPolicy.js","json/schemes/index.tsx","json/schemes/RecordsManagementPolicy.js","json/schemes/SynchronizationPolicy.js","components/Selector/Selector.tsx","components/MainWindow/helpers/index.tsx","components/MainWindow/Button/Button.tsx","components/ViewJson/ViewJson.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ObjectField","field","json","onChange","name","onClick","childName","selected","openPatent","way","useState","open","setOpen","fields","Object","keys","useEffect","undefined","console","log","handleClickObject","openWhenChildOpen","indexOf","title","onChangeInObject","key","value","renderContent","filter","item","type","className","Boolean","length","map","i","ArrayField","handleClickArray","onChangeInArray","newArray","innerType","Constructor","props","renderField","forEach","newObject","createObject","schema","newObj","TableObjects","removeItem","addItem","React","page","setPage","content","Array","isArray","slice","object","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","TableStrings","ItemsTable","itemsType","index","push","StringField","formik","useFormik","initialValues","label","validateOnBlur","validationSchema","yup","onSubmit","setFieldValue","TextField","fullWidth","values","e","handleChange","setFieldTouched","target","error","touched","errors","helperText","EditWindowConstructor","style","marginTop","marginBottom","EditWindow","NewEditor","yupSchema","selectedItem","setSelectedItem","ApprovalPolicySchema","required","url","of","Schemes","Selector","variants","options","createEmptyJsonObject","Button","text","ViewJson","data","plainText","locale","placeholder","confirmGood","width","height","labelColumn","display","MainWindow","publishRef","useRef","selectedSchema","setSelectedSchema","setJson","mod","setMod","current","setAttribute","encodeURIComponent","JSON","stringify","handleClickCreateNewJson","file","files","reader","FileReader","readAsText","onload","selectedJson","parse","String","result","firstKey","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+dAsHeA,EApGsB,SAAC,GAW3B,IATHC,EASE,EATFA,MACAC,EAQE,EARFA,KACAC,EAOE,EAPFA,SACAC,EAME,EANFA,KACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,WACAC,EACE,EADFA,IACE,EAEkBC,oBAASN,IAAQE,GAFnC,mBAECK,EAFD,KAEOC,EAFP,KAGAC,EAASC,OAAOC,KAAKd,EAAMY,QACjCG,qBAAU,gBACaC,KAAR,OAARV,QAAQ,IAARA,OAAA,EAAAA,EAAUE,MAAmBA,KAAM,OAAAF,QAAA,IAAAA,OAAH,EAAGA,EAAUE,OAC5CS,QAAQC,IAAR,OAAYZ,QAAZ,IAAYA,OAAZ,EAAYA,EAAUE,IAAIA,GAC1BW,OAEN,CAAClB,IAEHc,qBAAU,WACFP,KAAG,OAAKF,QAAL,IAAKA,OAAL,EAAKA,EAAUE,MAClBY,MAEL,CAACd,IAEJ,IAAMc,EAAoB,WAClBb,IACAA,IACAI,GAAQ,KAGhBI,qBAAU,YACqB,KAApB,OAAHP,QAAG,IAAHA,OAAA,EAAAA,EAAKa,QAAQ,OACbF,MAEL,CAACnB,IAEJ,IAAMsB,EAAQjB,GAAwBF,EAEhCgB,EAAoB,WACtBR,GAAQ,GACRP,EAAQJ,EAAOC,EAAMC,EAAUC,EAAMC,EAASI,IAO5Ce,EAAmB,SAACC,EAAKC,GACvBtB,GAAiB,IAATA,EACRD,EAASC,EAAD,YAAC,eAAUF,GAAX,kBAAkBuB,EAAMC,KAEhCvB,EAAS,2BAAID,GAAL,kBAAYuB,EAAMC,MAI5BC,EAAgBd,EAAOe,QAAO,SAACC,GAAD,MAAsC,WAA5B5B,EAAMY,OAAOgB,GAAMC,QAEjE,OACI,sBAAKC,UAAU,mBAAf,UACKC,QAAQT,IACT,sBAAKQ,UAAU,QAAf,UACKC,QAAQL,EAAcM,SACvB,cAAC,IAAD,CACI5B,QApBD,WACXO,GAASD,IAoBGoB,UAAWpB,EAAO,WAAa,KAGnC,qBACIoB,UAAWtB,KAAG,OAAKF,QAAL,IAAKA,OAAL,EAAKA,EAAUE,KAAM,WAAa,GAChDJ,QAASe,EAFb,SAIKG,OAIT,qBAAKQ,UAAWpB,EAAO,yBAA2B,SAAlD,SACKgB,EAAcO,KAAI,SAACL,EAAMM,GAAP,OACf,qBAAaJ,UAAW,oBAAxB,SACI,cAAC,EAAD,CACI9B,MAAOA,EAAMY,OAAOgB,GACpB3B,KAAMA,EAAK2B,IAAS,GACpBzB,KAAMyB,EACN1B,SAAUqB,EACVnB,QAASA,EACTE,SAAUA,EACVC,WAAYa,EACZZ,IAAKA,EAAMA,EAAM,IAAMoB,EAAOA,KAT5BM,Y,QCAfC,G,OAlFqB,SAAC,GAU1B,IARHnC,EAQE,EARFA,MAQE,IAPFC,YAOE,MAPK,GAOL,EANFE,EAME,EANFA,KACAD,EAKE,EALFA,SACAE,EAIE,EAJFA,QACAE,EAGE,EAHFA,SACAC,EAEE,EAFFA,WACAC,EACE,EADFA,IACE,EAEkBC,oBAAS,GAF3B,mBAECC,EAFD,KAEOC,EAFP,KAQNI,qBAAU,YACK,OAART,QAAQ,IAARA,OAAA,EAAAA,EAAUE,MAAKA,GACd4B,MAEN,CAACnC,IAEH,IAAMoC,EAAkB,SAACH,EAAGT,GACxB,IAAMa,EAAQ,YAAOrC,GACrBqC,EAASJ,GAAKT,EACdvB,EAASC,EAAMmC,IAGblB,EAAoB,WACtBb,IACAI,GAAQ,IAGNyB,EAAmB,WACrBzB,GAAQ,GACRP,EAAQJ,EAAOC,EAAMC,EAAUC,EAAMC,EAASI,IAElD,OACI,sBAAKsB,UAAU,kBAAf,UACI,sBAAKA,UAAU,QAAf,UAC8B,WAAzB9B,EAAMuC,UAAUV,MACjB,cAAC,IAAD,CAAgBzB,QA7Bb,WACXO,GAASD,IA4BgCoB,UAAWpB,EAAO,WAAa,KAEhE,qBACIoB,UAAWtB,KAAG,OAAKF,QAAL,IAAKA,OAAL,EAAKA,EAAUE,KAAM,WAAa,GAChDJ,QAASgC,EAFb,SAIKjC,OAGT,8BACI,qBAAK2B,UAAU,wBAAf,SACK7B,GAA6B,WAAvBD,EAAMuC,UAAUV,MACvB,qBAAKC,UAAYpB,EAAkB,GAAX,SAAxB,SAEQT,EAAKgC,KAAI,SAACL,EAAMM,GAAP,OACL,sBAAaJ,UAAU,aAAvB,UACI,qBAAKA,UAAWtB,EAAM,OAAS,KAE/B,cAAC,EAAD,CACIR,MAAOA,EAAMuC,UACbtC,KAAM2B,EACNvB,UAAWF,GAAQ+B,EAAI,GACvB/B,KAAM+B,EACNhC,SAAUmC,EACVjC,QAASA,EACTE,SAAUA,EACVC,WAAYa,EACZZ,IAAKA,EAAM,IAAML,GAAQ+B,EAAI,OAZ3BA,iBC7C3BM,EAfsB,SAACC,GAClC,IAAMZ,EAAOY,EAAMzC,MAAM6B,KAWzB,OAVoB,WAChB,OAAQA,GACJ,IAAK,SACD,OAAO,cAAC,EAAD,eAAiBY,IAC5B,IAAK,QACD,OAAO,cAAC,EAAD,eAAgBA,IAC3B,QACI,OAAO,MAGZC,ICqCI3C,G,OAlDsB,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,KAAKC,EAAiB,EAAjBA,QAAQI,EAAS,EAATA,IACjEI,EAASC,OAAOC,KAAKd,EAAMY,QAUjCG,qBAAU,WAPNH,EAAO+B,SAAQ,SAAAf,GACN3B,EAAK2B,IACNL,EAAiBK,EAAK,SAOhC,IAEF,IAAML,EAAmB,SAACC,EAAKC,GAC3B,IAAMmB,EAAY,IAAI/B,OAAOZ,GAC7B2C,EAAUpB,GAAOC,EACbtB,GAAiB,IAATA,EACRD,EAASC,EAAMyC,GAEf1C,EAAS0C,IAIjB,OACI,sBAAKd,UAAU,mBAAf,UACKC,QAAQ5B,GAAwB,kBAATA,IACxB,qBAAK2B,UAAU,aAAf,SACI,6BACK3B,MAIJS,EAAOqB,KAAI,SAACL,EAAMM,GAAP,OACR,qBAAaJ,UAAU,4BAAvB,SACI,cAAC,EAAD,CACI9B,MAAOA,EAAMY,OAAOgB,GACpB3B,KAAMA,EAAK2B,IAAS,GACpBzB,KAAMyB,EACN1B,SAAUqB,EACVnB,QAASA,EACTI,IAAKA,EAAI,IAAKoB,KAPZM,WCjDjBW,G,OAAe,SAAfA,EAAgBC,GACzB,IAAMC,EAAS,IAAIlC,OAAO,MAC1B,IAAK,IAAMW,KAAOsB,EAAOlC,OACrB,OAAQkC,EAAOlC,OAAOY,GAAKK,MACvB,IAAK,SACDkB,EAAOvB,GAAO,GACd,MACJ,IAAK,QACDuB,EAAOvB,GAAO,GACd,MACJ,IAAK,SACDuB,EAAOvB,GAAOqB,EAAaC,EAAOtB,IAClC,MACJ,QACI,OAAO,KAGnB,OAAOuB,I,SCiEIC,EAvEuB,SAAC,GAAiD,IAAhDhD,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMG,EAAkC,EAAlCA,QAAS6C,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAAa,EAC3DC,WAAe,GAD4C,mBAC5EC,EAD4E,KACtEC,EADsE,KAG7EvC,EAAOD,OAAOC,KAAKd,EAAMY,QAEzB0C,EAAUC,MAAMC,QAAQvD,GAAQA,EAAO,GAM7C,OACI,gCACI,kCACI,gCACA,+BACKa,EAAKmB,KAAI,SAAAL,GAAI,OACV,6BAAgBA,GAAPA,MAEb,oBAAIE,UAAU,gBAAd,SACI,mBAAG1B,QAAS8C,EAASpB,UAAU,mBAA/B,wBAIR,gCACCwB,EACIG,MAxBG,EAwBGL,EAxBH,EAwBuBA,EAxBvB,GAyBHnB,KAAI,SAACyB,EAAQxB,GAAT,OACG,+BACKpB,EAAKmB,KAAI,SAAAL,GAAI,OACV,6BACiC,WAA5B5B,EAAMY,OAAOgB,GAAMC,KACd6B,EAAO9B,GACP5B,EAAMY,OAAOgB,GAAMC,MAHpBD,EAAOM,MAOpB,qBAAIJ,UAAU,gBAAd,UACI,mBACI1B,QAAS,kBAAMA,EAAQsD,EArCvC,EAqC+CN,EAAqBlB,IACpDJ,UAAU,oBAFd,kBAMA,mBACI1B,QAAS,kBAAM6C,EA3C/B,EA2C0CG,EAAqBlB,IAC/CJ,UAAU,sBAFd,yBAhBC,MAAQI,WA4BhCoB,EAAQtB,OAAS,GAClB,cAAC2B,EAAA,EAAD,CACIC,mBAAoB,CAxDZ,GAyDRC,UAAU,MACVC,MAAOR,EAAQtB,OACf+B,YA3DQ,EA4DRX,KAAMA,EACNY,aAxDa,SAACC,EAAOC,GAC7Bb,EAAQa,UCsDDC,EA/DuB,SAAC,GAAuC,IAAtClE,EAAqC,EAArCA,KAAKG,EAAgC,EAAhCA,QAAQ6C,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,QAAa,EACjDC,WAAe,GADkC,mBAClEC,EADkE,KAC5DC,EAD4D,KAInEC,EAAUC,MAAMC,QAAQvD,GAAOA,EAAK,GAM1C,OACI,gCACI,kCACI,gCACA,+BACI,uBACA,oBAAI6B,UAAU,gBAAd,SACI,mBAAG1B,QAAS8C,EAASpB,UAAU,mBAA/B,wBAIR,gCACCwB,EACIG,MArBG,EAqBGL,EArBH,EAqBuBA,EArBvB,GAsBHnB,KAAI,SAACL,EAAMM,GAAP,OACG,+BACI,6BACKN,IAEL,qBAAIE,UAAU,gBAAd,UACI,mBACI1B,QAAS,kBAAIA,EAAQwB,EA7BrC,EA6B0CwB,EAAmBlB,IAC7CJ,UAAU,oBAFd,kBAMA,mBACI1B,QAAS,kBAAM6C,EAnC/B,EAmC0CG,EAAqBlB,IAC/CJ,UAAU,sBAFd,yBAXCF,EAAOM,WAuB/BoB,EAAQtB,OAAS,GAClB,cAAC2B,EAAA,EAAD,CACIC,mBAAoB,CAhDZ,GAiDRC,UAAU,MACVC,MAAOR,EAAQtB,OACf+B,YAnDQ,EAoDRX,KAAMA,EACNY,aAjDa,SAACC,EAAOC,GAC7Bb,EAAQa,UCSDE,G,OAbqB,SAAC3B,GACjC,IAAM4B,EAAY5B,EAAMzC,MAAM6B,KAC9B,OACI,8BACe,WAAdwC,EACK,cAAC,EAAD,eAAkB5B,IAClB,cAAC,EAAD,eAAkBA,QC0CjBN,EA7CqB,SAAC,GAAsD,IAArDnC,EAAoD,EAApDA,MAAoD,IAA7CC,YAA6C,MAAtC,GAAsC,EAAlCE,EAAkC,EAAlCA,KAAMD,EAA4B,EAA5BA,SAAUE,EAAkB,EAAlBA,QAASI,EAAS,EAATA,IACvE6B,EAAkB,SAACH,EAAGT,GACxB,IAAMa,EAAQ,YAAOrC,GACrBqC,EAASJ,GAAKT,EACdvB,EAASC,EAAMmC,IAuBnB,OACI,sBAAKR,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,SACI,6BAAK3B,MAET,8BACI,cAAC,EAAD,CACIF,KAAMA,EACND,MAAOA,EAAMuC,UACbnC,QAbQ,SAACwB,EAAMM,GAC3B9B,EAAQJ,EAAMuC,UAAWX,EAAMS,EAAiBH,EAAG9B,EAASI,EAAI,IAAIL,GAAQ+B,EAAI,KAapEe,WAnBc,SAACqB,GAC3B,IAAMhC,EAAWrC,EAAK0B,QAAO,SAACC,EAAMM,GAAP,OAAaA,IAAMoC,KAChDpE,EAASC,EAAMmC,IAkBHY,QA/BW,WACvB,IAAMZ,EAAQ,YAAOrC,GACrB,GAA6B,WAAzBD,EAAMuC,UAAUV,KAChBS,EAASiC,KAAK,QACX,CACH,IAAMxB,EAASF,EAAa7C,EAAMuC,WAClCD,EAASiC,KAAKxB,GAElB7C,EAASC,EAAMmC,Y,yBCqBRkC,EAxCsB,SAAC,GAAkC,IAAjCxE,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,KAAKD,EAAc,EAAdA,SAE/CuE,EAASC,YAAU,CACrBC,cAAe,CACXC,MAAuB,kBAATzE,EAAmBA,EAAO,GACxCsB,MAAOxB,GAEX4E,gBAAgB,EAChBC,iBAAkBC,IAAW,CACzB,MAAQ/E,IAEZgF,SAAU,eAIdjE,qBAAU,WACN0D,EAAOQ,cAAc,QAAShF,KAC/B,CAACA,IAQJ,OACI,8BACI,cAACiF,EAAA,EAAD,CACIC,WAAS,EACThF,KAAM,QACNyE,MAAOH,EAAOW,OAAOR,MACrBnD,MAAOgD,EAAOW,OAAO3D,MACrBvB,SAbS,SAACmF,GAClBZ,EAAOa,aAAaD,GACpBZ,EAAOc,gBAAgB,SACvBrF,EAASC,EAAKkF,EAAEG,OAAO/D,QAWfgE,MAAOhB,EAAOiB,QAAQjE,OAASM,QAAQ0C,EAAOkB,OAAOlE,OACrDmE,WAAYnB,EAAOiB,QAAQjE,OAASgD,EAAOkB,OAAOlE,WCrBlDoE,EArBc,SAACpD,GAC3B,IAAMZ,EAAOY,EAAMzC,MAAM6B,KAazB,OACI,qBAAKiE,MAAO,CAACC,UAAW,OAAQC,aAAc,QAA9C,SAbgB,WAChB,OAAQnE,GACJ,IAAK,SACD,OAAO,cAAC,EAAD,eAAiBY,IAC5B,IAAK,QACD,OAAO,cAAC,EAAD,eAAgBA,IAC3B,IAAK,SACD,OAAO,cAAC,EAAD,eAAiBA,IAC5B,QACI,OAAO,MAKVC,MCPEuD,EAJqB,SAACxD,GACjC,OAAO,cAAC,EAAD,eAA2BA,KCiCvByD,G,OA/BoB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAUlG,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,SAAc,EACtBO,qBADsB,mBACvD2F,EADuD,KACzCC,EADyC,KAQ9D,OACI,sBAAKvE,UAAU,YAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,8BACI,cAAC,EAAD,CACI9B,MAAOmG,EACPlG,KAAMA,EACNC,SAAUA,EACVE,QAbO,SAACJ,EAAOC,EAAMC,EAAUC,EAAMC,EAAQI,GAE7D6F,EADiB,CAAClG,OAAMH,QAAOC,OAAMC,WAAUE,UAAQI,SAavCF,SAAU8F,QAKtB,qBAAKtE,UAAU,qBAAf,SACKsE,GACD,cAAC,EAAD,eAAgBA,WClCnBE,EAAuBvB,IAAW,CAC3C,kBAAmBA,IAAW,CAC1B,QAAUA,MAAawB,SAAS,YAChC,OAAUxB,IAAW,CACjB,GAAMA,MAAayB,IAAI,mBAAmBD,SAAS,YACnD,MAASxB,MAAawB,SAAS,YAC/B,MAASxB,MAAawB,SAAS,cAEnC,kBAAmBxB,MAAY0B,GAC3B1B,MAAawB,SAAS,aAE1B,kBAAmBxB,MAAY0B,GAC3B1B,IAAW,CACP,KAAQA,MAAawB,SAAS,YAC9B,KAAQxB,MAAawB,SAAS,YAC9B,eAAexB,MAAY0B,GACvB1B,MAAawB,SAAS,aAE1B,OAAUxB,MAAY0B,GAClB1B,IAAW,CACP,KAAQA,MAAawB,SAAS,YAC9B,UAAYxB,MAAY0B,GACpB1B,MAAawB,SAAS,uBCLnCG,EAfC,CACZ,CACI9B,MAAM,4BACNnD,MCLqCsD,IAAW,CACpD,4BAA6BA,IAAW,CACpC,QAAWA,MAAawB,SAAS,YACjC,OAAUxB,IAAW,CACjB,GAAMA,MAAayB,IAAI,mBAAmBD,SAAS,YACnD,MAASxB,MAAawB,SAAS,YAC/B,MAASxB,MAAawB,SAAS,cAEnC,eAAgBxB,MAAY0B,GACxB1B,IAAW,CACP,KAAQA,MAAawB,SAAS,YAC9B,YAAexB,MAAY0B,GACvB1B,IAAW,CACP,QAAUA,MAAY0B,GAClB1B,MAAawB,SAAS,aAE1B,QAAUxB,MAAY0B,GAClB1B,IAAW,CACP,eAAgBA,MAAawB,SAAS,YACtC,eAAexB,MAAawB,SAAS,eAG7C,aAAaxB,MAAY0B,GACrB1B,MAAawB,SAAS,aAE1B,gBAAiBxB,MAAawB,SAAS,YACvC,cAAexB,MAAawB,SAAS,YACrC,wBAAyBxB,MAAawB,SAAS,YAC/C,qBAAsBxB,MAAawB,SAAS,eAGpD,OAAUxB,MAAY0B,GAClB1B,IAAW,CACP,KAAQA,MAAawB,SAAS,YAC9B,UAAWxB,MAAawB,SAAS,uBD3BrD,CACI3B,MAAM,kBACNnD,MAAO6E,GAEX,CACI1B,MAAM,yBACNnD,MEbmCsD,IAAW,CAClD,yBAA0BA,IAAW,CACjC,QAAUA,MAAawB,SAAS,YAChC,UAAaxB,MAAY0B,GACrB1B,IAAW,CACP,OAAUA,MAAawB,SAAS,YAChC,KAAQxB,MAAawB,SAAS,YAC9B,OAAUxB,MACLyB,IAAI,mBACJD,SAAS,YACd,kBAAmBxB,MAAawB,SAAS,YACzC,mBAAoBxB,MAAawB,SAAS,YAC1C,KAAQxB,IAAW,CACf,QAAUA,MACLyB,IAAI,mBACJD,SAAS,YACd,IAAOxB,MACFyB,IAAI,mBACJD,SAAS,uB,SCMlBI,G,OAXyB,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SAAUtB,EAA4B,EAA5BA,aAAchF,EAAc,EAAdA,SAC/D,OACI,qBAAKwB,UAAU,qBAAf,SACI,cAAC,IAAD,CACIL,MAAOnB,EACPJ,SAAUoF,EACVuB,QAASD,QCrBZE,EAAwB,SAAxBA,EAAyBhE,GAClC,IAAMC,EAAS,IAAIlC,OAAO,MAC1B,IAAK,IAAMW,KAAOsB,EAAOlC,OACrB,OAAQkC,EAAOlC,OAAOY,GAAKK,MACvB,IAAK,SACDkB,EAAOvB,GAAO,GACd,MACJ,IAAK,QACDuB,EAAOvB,GAAO,GACd,MACJ,IAAK,SACDuB,EAAOvB,GAAOsF,EAAsBhE,EAAOlC,OAAOY,IAClD,MACJ,QACI,OAAO,KAGnB,OAAOuB,GCNIgE,G,OARA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAM5G,EAAa,EAAbA,QAEnB,OACI,wBAAQA,QAASA,EAAS0B,UAAU,iBAApC,SACKkF,M,oCC0BEC,G,OAvBoB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMhH,EAAc,EAAdA,SAMxC,OACI,qBAAK4B,UAAU,sBAAf,SACI,8BACI,cAAC,IAAD,CACI5B,SARJ,SAACmF,GACTnF,EAASmF,EAAE8B,YAQCC,OAAQA,IACRC,YAAaH,EACbI,aAAa,EACbC,MAAM,OACNC,OAAO,OACP1B,MAAO,CAAC2B,YAAY,CAACC,QAAQ,iBC+DlCC,EA9Ec,WACzB,IAAMC,EAAkBC,mBADO,EAEa1E,WAAoBuD,EAAQ,IAFzC,mBAExBoB,EAFwB,KAERC,EAFQ,OAGP5E,WAAoB2D,EAAsBgB,EAAerG,QAHlD,mBAGxBxB,EAHwB,KAGlB+H,EAHkB,OAITvH,oBAAS,GAJA,mBAIxBwH,EAJwB,KAInBC,EAJmB,KAUzB5C,EAAe,SAAC5B,GAClBsE,EAAQtE,IAGZ3C,qBAAU,WAAO,IACNoH,EAAWP,EAAXO,QACFA,IAGLA,EAAQC,aAAa,OAAQ,uCAAyCC,mBAAmBC,KAAKC,UAAUtI,EAAM,KAAM,KACpHkI,EAAQC,aAAa,WAArB,UAAoCN,EAAelD,MAAnD,aACD,CAAC3E,IAEJc,qBAAU,WACNyH,MACDV,GAEH,IAAMU,EAA2B,WAC7BR,EAAQlB,EAAsBgB,EAAerG,SAqBjD,OACI,qCACI,sBAAKK,UAAU,UAAf,UACI,cAAC,EAAD,CAAU8E,SAAUF,EAASpB,aA9CZ,SAACD,GAC1B0C,EAAkB1C,IA6CuD/E,SAAUwH,IAC3E,cAAC,EAAD,CAAQd,KAAM,SAAU5G,QAASoI,IAFrC,KAII,qBAAK1G,UAAU,YAAf,SACI,uBAAOD,KAAK,OAAO3B,SAzBV,SAAC+D,GACtB,IAAMwE,EAAOxE,EAAMuB,OAAOkD,MAAM,GAC5BC,EAAS,IAAIC,WAEjBD,EAAOE,WAAWJ,GAElBE,EAAOG,OAAS,WACZ,IAAMC,EAAeT,KAAKU,MAAMC,OAAON,EAAOO,SACxCC,EAAWtI,OAAOC,KAAKiI,GAAc,GAC3CrC,EAAQ/D,SAAQ,SAACf,EAAMM,GACXN,EAAKgD,QAAUuE,IACfnB,EAAQe,GACRhB,EAAkBrB,EAAQxE,cAelC,qBAAKJ,UAAU,UAAf,SACI,mBAAGsH,IAAKxB,EAAR,SACI,cAAC,EAAD,CAAQZ,KAAM,UAAW5G,QAAS,sBAK9C,gCACI,sBAAK0B,UAAU,eAAf,UACI,wBAAQ1B,QAAS,kBAAI8H,GAAO,IAA5B,oBACA,wBAAQ9H,QAAS,kBAAI8H,GAAO,IAA5B,qBAEPD,EACK,cAAC,EAAD,CAAW9B,UAAW2B,EAAerG,MAAOxB,KAAMA,EAAMC,SAAUoF,IAClE,cAAC,EAAD,CAAU4B,KAAMjH,EAAMC,SAAUoF,WC9EnC+D,G,OAFH,kBAAM,cAAC,EAAD,MCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.392e7c42.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport Constructor from \"../Constructor\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport './ObjectField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    childName?: string\n    selected: any\n    openPatent?: any\n    way?: string\n}\n\nconst ObjectField: React.FC<Props> = (\n    {\n        field,\n        json,\n        onChange,\n        name,\n        onClick,\n        childName,\n        selected,\n        openPatent,\n        way\n    }) => {\n\n    const [open, setOpen] = useState(name || childName ? false : true)\n    const fields = Object.keys(field.fields)\n    useEffect(()=>{\n        if(selected?.way!==undefined && way===selected?.way){\n            console.log(selected?.way,way)\n            handleClickObject()\n        }\n    },[json])\n\n    useEffect(() => {\n        if (way === selected?.way) {\n            openWhenChildOpen()\n        }\n    }, [selected])\n\n    const openWhenChildOpen = () => {\n        if (openPatent) {\n            openPatent()\n            setOpen(true)\n        }\n    }\n    useEffect(() => {\n        if (way?.indexOf('>') === -1) {\n            handleClickObject()\n        }\n    }, [field])\n\n    const title = childName ? childName : name\n\n    const handleClickObject = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    const onChangeInObject = (key, value) => {\n        if (name || name === 0) {\n            onChange(name, {...json, [key]: value})\n        } else {\n            onChange({...json, [key]: value})\n        }\n    }\n\n    const renderContent = fields.filter((item) => field.fields[item].type !== 'string')\n\n    return (\n        <div className='object-container'>\n            {Boolean(title) &&\n            <div className='title'>\n                {Boolean(renderContent.length) &&\n                <ExpandMoreIcon\n                    onClick={onOpen}\n                    className={open ? 'rev-icon' : ''}\n                />\n                }\n                <div\n                    className={way === selected?.way ? 'selected' : ''}\n                    onClick={handleClickObject}\n                >\n                    {title}\n                </div>\n            </div>\n            }\n            <div className={open ? 'object-child-container' : 'hidden'}>\n                {renderContent.map((item, i) =>\n                    <div key={i} className={'object-child-item'}>\n                        <Constructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            selected={selected}\n                            openPatent={openWhenChildOpen}\n                            way={way ? way + '>' + item : item}\n                        />\n                    </div>\n                )}\n            </div>\n\n        </div>\n    )\n}\n\nexport default ObjectField\n","import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Constructor from \"../Constructor\";\nimport './ArrayField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    selected: any\n    openPatent?: any\n    way?: string\n}\n\nconst ArrayField: React.FC<Props> = (\n    {\n        field,\n        json = [],\n        name,\n        onChange,\n        onClick,\n        selected,\n        openPatent,\n        way\n    }) => {\n\n    const [open, setOpen] = useState(false)\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    useEffect(()=>{\n        if(selected?.way==way){\n            handleClickArray()\n        }\n    },[json])\n\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const openWhenChildOpen = () => {\n        openPatent()\n        setOpen(true)\n    }\n\n    const handleClickArray = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n    return (\n        <div className='array-container'>\n            <div className='title'>\n                {field.innerType.type !== 'string' &&\n                <ExpandMoreIcon onClick={onOpen} className={open ? 'rev-icon' : ''}/>\n                }\n                <div\n                    className={way === selected?.way ? 'selected' : ''}\n                    onClick={handleClickArray}\n                >\n                    {name}\n                </div>\n            </div>\n            <div>\n                <div className='array-child-container'>\n                    {json&&field.innerType.type!=='string'&&\n                    <div className={!open ? 'hidden' : ''}>\n                        {\n                            json.map((item, i) =>\n                                <div key={i} className='array-item'>\n                                    <div className={way ? 'line' : ''}>\n                                    </div>\n                                    <Constructor\n                                        field={field.innerType}\n                                        json={item}\n                                        childName={name + (i + 1)}\n                                        name={i}\n                                        onChange={onChangeInArray}\n                                        onClick={onClick}\n                                        selected={selected}\n                                        openPatent={openWhenChildOpen}\n                                        way={way + '>' + name + (i + 1)}\n                                    />\n                                </div>\n                            )}\n                    </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    childName?:string\n    selected: any\n    openPatent?: any\n    way?:string\n}\n\nconst Constructor: React.FC<Props> = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n}\n\nexport default Constructor\n","import EditWindowConstructor from \"../EditWindowConstructor\";\nimport * as React from \"react\";\nimport './ObjectField.css'\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    way: string\n}\n\nconst ObjectField: React.FC<Props> = ({field, json, onChange, name,onClick,way}) => {\n    const fields = Object.keys(field.fields)\n\n    const checkFields = () => {\n        fields.forEach(item => {\n            if (!json[item]){\n                onChangeInObject(item,[])\n            }\n        })\n    }\n\n    useEffect(()=> {\n        checkFields()\n    },[])\n\n    const onChangeInObject = (key, value) => {\n        const newObject = new Object(json)\n        newObject[key] = value\n        if (name || name === 0) {\n            onChange(name, newObject)\n        } else {\n            onChange(newObject)\n        }\n    }\n\n    return (\n        <div className='object-container'>\n            {Boolean(name && typeof name !== \"number\") &&\n            <div className='edit-title'>\n                <h2>\n                    {name}\n                </h2>\n            </div>\n            }\n                {fields.map((item, i) =>\n                    <div key={i} className='.object-child-item-editor'>\n                        <EditWindowConstructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            way={way+'>'+ item}\n                        />\n                    </div>\n                )}\n        </div>\n    )\n}\n\nexport default ObjectField\n","export const createObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createObject(schema[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: () => void\n}\n\nconst TableObjects: React.FC<Props> = ({field, json, onClick, removeItem, addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n    const keys = Object.keys(field.fields)\n\n    const content = Array.isArray(json) ? json : []\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    {keys.map(item =>\n                        <td key={item}>{item}</td>\n                    )}\n                    <td className='buttons-field'>\n                        <u onClick={addItem} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((object, i) => (\n                            <tr key={'bob' + i}>\n                                {keys.map(item =>\n                                    <td key={item + i}>\n                                        {field.fields[item].type === 'string'\n                                            ? object[item]\n                                            : field.fields[item].type\n                                        }\n                                    </td>\n                                )}\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={() => onClick(object, page * rowsPerPage + i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableObjects\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem: () => void\n}\n\nconst TableStrings: React.FC<Props> = ({json,onClick,removeItem,addItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n\n    const content = Array.isArray(json)? json:[]\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    <td></td>\n                    <td className='buttons-field'>\n                        <u onClick={addItem} className='array-button add'>Add</u>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((item, i) => (\n                            <tr key={item + i}>\n                                <td >\n                                    {item}\n                                </td>\n                                <td className='buttons-field'>\n                                    <u\n                                        onClick={()=>onClick(item,page * rowsPerPage+i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </u>\n                                    <u\n                                        onClick={() => removeItem(page * rowsPerPage + i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </u>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableStrings\n","import * as React from \"react\";\nimport TableObjects from \"./TableObjects/TableObjects\";\nimport TableStrings from \"./TableStrings/TableStrings\";\nimport './ItemsTable.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n    addItem:()=>void\n}\n\nconst ItemsTable: React.FC<Props> = (props) => {\n    const itemsType = props.field.type\n    return (\n        <div>\n        {itemsType === 'object'\n            ? <TableObjects {...props}/>\n            : <TableStrings {...props}/>\n        }\n        </div>\n    )\n\n}\n\nexport default ItemsTable\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\nimport './ArrayField.css'\nimport {createObject} from \"./helpers\";\nimport ItemsRows from \"./ItemsTable/ItemsTable\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    way: string\n}\n\nconst ArrayField: React.FC<Props> = ({field, json = [], name, onChange, onClick, way}) => {\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const handleClickAddItem = () => {\n        const newArray = [...json]\n        if (field.innerType.type === 'string') {\n            newArray.push('')\n        } else {\n            const newObj = createObject(field.innerType)\n            newArray.push(newObj)\n        }\n        onChange(name, newArray)\n    }\n\n    const handleClickRemoveItem = (index) => {\n        const newArray = json.filter((item, i) => i !== index)\n        onChange(name, newArray)\n    }\n\n    const handleClickItem = (item, i) => {\n        onClick(field.innerType, item, onChangeInArray, i, onClick, way+'>'+name + (i + 1))\n    }\n\n    return (\n        <div className='array-edit-container'>\n            <div className='edit-title'>\n                <h2>{name}</h2>\n            </div>\n            <div>\n                <ItemsRows\n                    json={json}\n                    field={field.innerType}\n                    onClick={handleClickItem}\n                    removeItem={handleClickRemoveItem}\n                    addItem={handleClickAddItem}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import {TextField} from \"@material-ui/core\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\nimport {useEffect} from \"react\";\n\ninterface Props {\n    field: any\n    json?: any\n    name?: string|number\n    onChange: any\n}\n\nconst StringField: React.FC<Props> = ({field, json, name,onChange}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            label: typeof name === 'string'? name : '',\n            value: json\n        },\n        validateOnBlur: true,\n        validationSchema: yup.object({\n            'value':field\n        }),\n        onSubmit: () => {\n        }\n    });\n\n    useEffect(() => {\n        formik.setFieldValue('value', json)\n    }, [json])\n\n    const handleChange = (e) => {\n        formik.handleChange(e);\n        formik.setFieldTouched('value');\n        onChange(name,e.target.value)\n    }\n\n    return (\n        <div>\n            <TextField\n                fullWidth\n                name={'value'}\n                label={formik.values.label}\n                value={formik.values.value}\n                onChange={handleChange}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n                helperText={formik.touched.value && formik.errors.value}\n            />\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport StringField from \"./StringtField/StringtField\";\n\nconst EditWindowConstructor = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return (\n        <div style={{marginTop: '10px', marginBottom: '10px' }}>\n            {renderField()}\n        </div>\n    )\n }\n\n export default EditWindowConstructor\n","import * as React from \"react\";\nimport EditWindowConstructor from \"./EditWindowConstructor/EditWindowConstructor\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n}\n\nconst EditWindow: React.FC<Props> = (props) => {\n    return <EditWindowConstructor {...props}/>\n}\n\nexport default EditWindow\n","import * as React from \"react\";\nimport { useState} from \"react\";\nimport Constructor from \"./Constructor/Constructor\";\nimport EditWindow from \"./EditWindow/EditWindow\";\nimport './NewEditor.css'\n\ninterface Props {\n    yupSchema: any\n    json: object\n    onChange: (object:object)=> void\n}\n\nconst NewEditor: React.FC<Props> = ({yupSchema,json,onChange}) => {\n    const [selectedItem, setSelectedItem] = useState<object >()\n\n    const handleClickElement = (field, json, onChange, name, onClick,way) => {\n        const selected = {name, field, json, onChange, onClick,way}\n        setSelectedItem(selected)\n    }\n\n    return (\n        <div className='container'>\n            <div className='json-tree-window'>\n                <div>\n                    <Constructor\n                        field={yupSchema}\n                        json={json}\n                        onChange={onChange}\n                        onClick={handleClickElement}\n                        selected={selectedItem}\n                    />\n                </div>\n            </div>\n\n            <div className='json-editor-window'>\n                {selectedItem &&\n                <EditWindow {...selectedItem}/>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default NewEditor\n","import * as yup from 'yup'\n\nexport const ApprovalPolicySchema = yup.object({\n    \"Approval Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Approval Groups\": yup.array().of(\n            yup.string().required('required')\n        ),\n        \"Route Templates\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Rank\": yup.string().required('required'),\n                \"Record Types\":yup.array().of(\n                    yup.string().required('required')\n                ),\n                \"Levels\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Approvers\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                    })\n\n                )\n            })\n        )\n    })\n})\n","import {ApprovalPolicySchema} from \"./ApprovalPolicy\";\nimport {RecordsManagementPolicySchema} from \"./RecordsManagementPolicy\";\nimport {SynchronizationPolicySchema} from \"./SynchronizationPolicy\";\n\nconst Schemes = [\n    {\n        label:'Records Management Policy',\n        value: RecordsManagementPolicySchema\n    },\n    {\n        label:'Approval Policy',\n        value: ApprovalPolicySchema\n    },\n    {\n        label:'Synchronization Policy',\n        value: SynchronizationPolicySchema\n    },\n]\n\nexport default Schemes\n","import * as yup from 'yup'\n\nexport const RecordsManagementPolicySchema = yup.object({\n    \"Records Management Policy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Record Types\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Definitions\": yup.array().of(\n                    yup.object({\n                        \"Systems\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Aliases\":yup.array().of(\n                            yup.object({\n                                \"Policy Field\": yup.string().required('required'),\n                                \"System Field\":yup.string().required('required')\n                            })\n                        ),\n                        \"Item Types\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Singular Name\": yup.string().required('required'),\n                        \"Plural Name\": yup.string().required('required'),\n                        \"Ownership Description\": yup.string().required('required'),\n                        \"Content Originator\": yup.string().required('required'),\n                    })\n                ),\n                \"Fields\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Is Data\": yup.string().required('required')\n                    })\n                )\n            })\n        )\n    })\n})\n","import * as yup from 'yup'\n\nexport const SynchronizationPolicySchema = yup.object({\n    \"Synchronization Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Locations\": yup.array().of(\n            yup.object({\n                \"System\": yup.string().required('required'),\n                \"Name\": yup.string().required('required'),\n                \"Server\": yup.string()\n                    .url('Enter valid url')\n                    .required('required'),\n                \"Service Account\": yup.string().required('required'),\n                \"Service Password\": yup.string().required('required'),\n                \"Urls\": yup.object({\n                    \"Browser\":yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                    \"API\": yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                })\n            })\n        )\n    })\n})\n","import * as React from 'react';\nimport Select from \"react-select\";\nimport './Selector.css'\n\ninterface ArrayItem {\n    label: string\n    value: object\n}\n\ninterface ProfilesProps {\n    variants: Array<ArrayItem>\n    handleChange: (selectedOption:ArrayItem|null) => void\n    selected: ArrayItem|null\n}\n\nconst Selector:React.FC<ProfilesProps> = ({variants, handleChange, selected}) => {\n    return(\n        <div className='selector-container'>\n            <Select\n                value={selected}\n                onChange={handleChange}\n                options={variants}\n            />\n        </div>\n    )\n}\nexport default  Selector\n","export const createEmptyJsonObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createEmptyJsonObject(schema.fields[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from 'react';\nimport './Button.css'\n\nconst Button = ({text, onClick}) => {\n\n    return (\n        <button onClick={onClick} className='actions-button'>\n            {text}\n        </button>\n    )\n}\nexport default Button\n","import * as React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport './ViewJson.css'\n\ninterface Props {\n    data: object\n    onChange?: any\n}\n\nconst ViewJson: React.FC<Props>  = ({ data, onChange}) => {\n\n    const bob = (e:any) => {\n        onChange(e.plainText)\n    }\n\n    return (\n        <div className='json-display-window'>\n            <div>\n                <JSONInput\n                    onChange={bob}\n                    locale={locale}\n                    placeholder={data}\n                    confirmGood={false}\n                    width='100%'\n                    height='100%'\n                    style={{labelColumn:{display:'none'}}}\n                />\n            </div>\n        </div>\n    )\n\n}\nexport default ViewJson\n","import * as React from 'react';\nimport NewEditor from \"../NewEditor/NewEditor\";\nimport Schemes from \"../../json/schemes\";\nimport Selector from \"../Selector/Selector\";\nimport {createEmptyJsonObject} from \"./helpers\";\nimport {useEffect, useRef, useState} from \"react\";\nimport Button from \"./Button/Button\";\nimport './MainWindow.css'\nimport ViewJson from \"../ViewJson/ViewJson\";\n\n\nconst MainWindow: React.FC = () => {\n    const publishRef: any = useRef();\n    const [selectedSchema, setSelectedSchema] = React.useState<any>(Schemes[0])\n    const [json, setJson] = React.useState<any>(createEmptyJsonObject(selectedSchema.value))\n    const [mod, setMod] = useState(true)\n\n    const handleChangeSelector = (e) => {\n        setSelectedSchema(e)\n    }\n\n    const handleChange = (object) => {\n        setJson(object)\n    }\n\n    useEffect(() => {\n        const {current} = publishRef;\n        if (!current) {\n            return;\n        }\n        current.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json, null, 2)));\n        current.setAttribute('download', `${selectedSchema.label}.json`);\n    }, [json])\n\n    useEffect(() => {\n        handleClickCreateNewJson()\n    }, selectedSchema)\n\n    const handleClickCreateNewJson = () => {\n        setJson(createEmptyJsonObject(selectedSchema.value))\n    }\n\n    const handleChangeFile = (event) => {\n        const file = event.target.files[0];\n        let reader = new FileReader();\n\n        reader.readAsText(file);\n\n        reader.onload = function () {\n            const selectedJson = JSON.parse(String(reader.result))\n            const firstKey = Object.keys(selectedJson)[0]\n            Schemes.forEach((item, i) => {\n                    if (item.label === firstKey) {\n                        setJson(selectedJson)\n                        setSelectedSchema(Schemes[i])\n                    }\n                }\n            )\n        };\n    }\n    return (\n        <>\n            <div className='actions'>\n                <Selector variants={Schemes} handleChange={handleChangeSelector} selected={selectedSchema}/>\n                <Button text={'Create'} onClick={handleClickCreateNewJson}/>\n                or\n                <div className='add-input'>\n                    <input type='file' onChange={handleChangeFile}/>\n                </div>\n                <div className='publish'>\n                    <a ref={publishRef}>\n                        <Button text={'Publish'} onClick={() => {\n                        }}/>\n                    </a>\n                </div>\n            </div>\n            <div>\n                <div className='mod-selector'>\n                    <button onClick={()=>setMod(true)}>editor</button>\n                    <button onClick={()=>setMod(false)}>json</button>\n                </div>\n            {mod\n                ? <NewEditor yupSchema={selectedSchema.value} json={json} onChange={handleChange}/>\n                : <ViewJson data={json} onChange={handleChange}/>\n            }\n            </div>\n        </>\n    )\n}\nexport default MainWindow\n","import MainWindow from \"./components/MainWindow/MainWindow\";\nimport './App.css'\n\nconst App = () => <MainWindow/>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}