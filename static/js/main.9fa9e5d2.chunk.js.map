{"version":3,"sources":["components/NewEditor/Constructor/ObjectField/ObjectField.tsx","components/NewEditor/Constructor/ArrayField/ArrayField.tsx","components/NewEditor/Constructor/Constructor.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ObjectField/ObjectField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/helpers/index.js","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableObjects/TableObjects.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/TableStrings/TableStrings.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ItemsTable/ItemsTable.tsx","components/NewEditor/EditWindow/EditWindowConstructor/ArrayField/ArrayField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/StringtField/StringtField.tsx","components/NewEditor/EditWindow/EditWindowConstructor/EditWindowConstructor.tsx","components/NewEditor/EditWindow/EditWindow.tsx","components/NewEditor/NewEditor.tsx","json/schemes/ApprovalPolicy.js","json/schemes/index.tsx","json/schemes/RecordsManagementPolicy.js","json/schemes/SynchronizationPolicy.js","components/Selector/Selector.tsx","components/MainWindow/helpers/index.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ObjectField","field","json","onChange","name","onClick","childName","selected","openPatent","way","useState","open","setOpen","fields","Object","keys","useEffect","handleClickObject","openWhenChildOpen","indexOf","forEach","item","onChangeInObject","title","key","value","renderContent","filter","type","className","Boolean","length","map","i","ArrayField","handleClickArray","onChangeInArray","newArray","innerType","Constructor","props","renderField","newObject","createObject","schema","newObj","TableObjects","removeItem","React","page","setPage","content","Array","isArray","slice","object","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","TableStrings","ItemsTable","itemsType","push","index","StringField","formik","useFormik","initialValues","label","validateOnBlur","validationSchema","yup","onSubmit","setFieldValue","TextField","fullWidth","values","e","handleChange","setFieldTouched","target","error","touched","errors","helperText","EditWindowConstructor","EditWindow","NewEditor","yupSchema","selectedItem","setSelectedItem","ApprovalPolicySchema","required","url","of","Schemes","Selector","variants","options","createEmptyJsonObject","MainWindow","publishRef","useRef","selectedSchema","setSelectedSchema","setJson","current","setAttribute","encodeURIComponent","JSON","stringify","handleClickCreateNewJson","file","files","reader","FileReader","readAsText","onload","selectedJson","parse","String","result","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fa9e5d2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport Constructor from \"../Constructor\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport './ObjectField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    childName?: string\n    selected: any\n    openPatent?: any\n    way?: string\n}\n\nconst ObjectField: React.FC<Props> = (\n    {\n        field,\n        json,\n        onChange,\n        name,\n        onClick,\n        childName,\n        selected,\n        openPatent,\n        way\n    }) => {\n\n    const [open, setOpen] = useState(name || childName ? false : true)\n    const fields = Object.keys(field.fields)\n    const checkFields = () => {\n        fields.forEach(item => {\n            if (!json[item]) {\n                onChangeInObject(item, [])\n            }\n        })\n    }\n\n    useEffect(()=>{\n        if(selected?.way==way){\n            handleClickObject()\n        }\n    },[json,field])\n\n    useEffect(() => {\n        if (way === selected?.way) {\n            openWhenChildOpen()\n        }\n    }, [selected])\n\n    const openWhenChildOpen = () => {\n        if (openPatent) {\n            openPatent()\n            setOpen(true)\n        }\n    }\n    useEffect(() => {\n        if (way?.indexOf('>') === -1) {\n            handleClickObject()\n        }\n        checkFields()\n    }, [])\n\n    const title = childName ? childName : name\n\n    const handleClickObject = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    const onChangeInObject = (key, value) => {\n        if (name || name === 0) {\n            onChange(name, {...json, [key]: value})\n        } else {\n            onChange({...json, [key]: value})\n        }\n    }\n\n    const renderContent = fields.filter((item) => field.fields[item].type !== 'string')\n\n    return (\n        <div className='object-container'>\n            {Boolean(title) &&\n            <div className='title'>\n                {Boolean(renderContent.length) &&\n                <ExpandMoreIcon\n                    onClick={onOpen}\n                    className={open ? 'rev-icon' : ''}\n                />\n                }\n                <div\n                    className={selected && way === selected.way ? 'selected' : ''}\n                    onClick={handleClickObject}\n                >\n                    {title}\n                </div>\n            </div>\n            }\n            <div className={open ? 'object-child-container' : 'hidden'}>\n                {renderContent.map((item, i) =>\n                    <div key={i} className={'object-child-item'}>\n                        <Constructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            selected={selected}\n                            openPatent={openWhenChildOpen}\n                            way={way ? way + '>' + item : item}\n                        />\n                    </div>\n                )}\n            </div>\n\n        </div>\n    )\n}\n\nexport default ObjectField\n","import * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Constructor from \"../Constructor\";\nimport './ArrayField.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    selected: any\n    openPatent?: any\n    way?: string\n}\n\nconst ArrayField: React.FC<Props> = (\n    {\n        field,\n        json = [],\n        name,\n        onChange,\n        onClick,\n        selected,\n        openPatent,\n        way\n    }) => {\n\n    const [open, setOpen] = useState(false)\n\n    const onOpen = () => {\n        setOpen(!open)\n    }\n\n    useEffect(()=>{\n        if(selected?.way==way){\n            handleClickArray()\n        }\n    },[json])\n\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const openWhenChildOpen = () => {\n        openPatent()\n        setOpen(true)\n    }\n\n    const handleClickArray = () => {\n        setOpen(true)\n        onClick(field, json, onChange, name, onClick, way)\n    }\n    return (\n        <div className='array-container'>\n            <div className='title'>\n                {field.innerType.type !== 'string' &&\n                <ExpandMoreIcon onClick={onOpen} className={open ? 'rev-icon' : ''}/>\n                }\n                <div\n                    className={way === selected?.way ? 'selected' : ''}\n                    onClick={handleClickArray}\n                >\n                    {name}\n                </div>\n            </div>\n            <div>\n                <div className='array-child-container'>\n                    {json &&\n                    <div className={!open ? 'hidden' : ''}>\n                        {\n                            json.map((item, i) =>\n                                <div key={i} className='array-item'>\n                                    <div className={way ? 'line' : ''}>\n                                    </div>\n                                    <Constructor\n                                        field={field.innerType}\n                                        json={item}\n                                        childName={name + (i + 1)}\n                                        name={i}\n                                        onChange={onChangeInArray}\n                                        onClick={onClick}\n                                        selected={selected}\n                                        openPatent={openWhenChildOpen}\n                                        way={way + '>' + name + (i + 1)}\n                                    />\n                                </div>\n                            )}\n                    </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    childName?:string\n    selected: any\n    openPatent?: any\n    way?:string\n}\n\nconst Constructor: React.FC<Props> = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n}\n\nexport default Constructor\n","import EditWindowConstructor from \"../EditWindowConstructor\";\nimport * as React from \"react\";\nimport './ObjectField.css'\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n    name?: string | number\n    onClick?: any\n    way: string\n}\n\nconst ObjectField: React.FC<Props> = ({field, json, onChange, name,onClick,way}) => {\n    const fields = Object.keys(field.fields)\n\n    const checkFields = () => {\n        fields.forEach(item => {\n            if (!json[item]){\n                onChangeInObject(item,[])\n            }\n        })\n    }\n\n    useEffect(()=> {\n        checkFields()\n    },[])\n\n    const onChangeInObject = (key, value) => {\n        const newObject = new Object(json)\n        newObject[key] = value\n        if (name || name === 0) {\n            onChange(name, newObject)\n        } else {\n            onChange(newObject)\n        }\n    }\n\n    return (\n        <div className='object-container'>\n            {Boolean(name && typeof name !== \"number\") &&\n            <div className='edit-title'>\n                <h2>\n                    {name}\n                </h2>\n            </div>\n            }\n                {fields.map((item, i) =>\n                    <div key={i} className='.object-child-item-editor'>\n                        <EditWindowConstructor\n                            field={field.fields[item]}\n                            json={json[item] || ''}\n                            name={item}\n                            onChange={onChangeInObject}\n                            onClick={onClick}\n                            way={way+'>'+ item}\n                        />\n                    </div>\n                )}\n        </div>\n    )\n}\n\nexport default ObjectField\n","export const createObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createObject(schema[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick:any\n    removeItem: any\n}\n\nconst TableObjects: React.FC<Props> = ({field, json,onClick,removeItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n    const keys = Object.keys(field.fields)\n\n    const content = Array.isArray(json)? json:[]\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    {keys.map(item =>\n                        <td key={item}>{item}</td>\n                    )}\n                    <td className='buttons-field'>\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((object, i) => (\n                            <tr key={'bob'+ i}>\n                                {keys.map(item =>\n                                    <td key={item + i}>\n                                        {field.fields[item].type === 'string'\n                                            ? object[item]\n                                            : field.fields[item].type\n                                        }\n                                    </td>\n                                )}\n                                <td className='buttons-field'>\n                                    <div className='button-container'>\n                                        <div\n                                            onClick={()=>onClick(object,page * rowsPerPage+i)}\n                                            className='array-button edit'\n                                        >\n                                            Edit\n                                        </div>\n                                        <div\n                                            onClick={()=>removeItem(page * rowsPerPage+i)}\n                                            className='array-button delete'\n                                        >\n                                            Delete\n                                        </div>\n                                    </div>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableObjects\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n}\n\nconst TableStrings: React.FC<Props> = ({field, json,onClick,removeItem}) => {\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 5;\n\n    const content = Array.isArray(json)? json:[]\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    return (\n        <div>\n            <table>\n                <tbody>\n                {content\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((item, i) => (\n                            <tr key={item + i}>\n                                <td >\n                                    {item}\n                                </td>\n                                <div className='button-container'>\n                                    <div\n                                        onClick={()=>onClick(item,page * rowsPerPage+i)}\n                                        className='array-button edit'\n                                    >\n                                        Edit\n                                    </div>\n                                    <div\n                                        onClick={()=>removeItem(page * rowsPerPage+i)}\n                                        className='array-button delete'\n                                    >\n                                        Delete\n                                    </div>\n                                </div>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </table>\n            {content.length > 5 &&\n            <TablePagination\n                rowsPerPageOptions={[rowsPerPage]}\n                component=\"div\"\n                count={content.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n            />\n            }\n        </div>\n    )\n\n}\n\nexport default TableStrings\n","import * as React from \"react\";\nimport TableObjects from \"./TableObjects/TableObjects\";\nimport TableStrings from \"./TableStrings/TableStrings\";\nimport './ItemsTable.css'\n\ninterface Props {\n    field?: any\n    json?: any\n    onClick: any\n    removeItem: any\n}\n\nconst ItemsTable: React.FC<Props> = (props) => {\n    const itemsType = props.field.type\n    return (\n        <div>\n        {itemsType === 'object'\n            ? <TableObjects {...props}/>\n            : <TableStrings {...props}/>\n        }\n        </div>\n    )\n\n}\n\nexport default ItemsTable\n","import * as React from \"react\";\nimport {TablePagination} from \"@material-ui/core\";\nimport './ArrayField.css'\nimport {createObject} from \"./helpers\";\nimport ItemsRows from \"./ItemsTable/ItemsTable\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n    field?: any\n    json?: any\n    name?: string\n    onChange?: any\n    onClick?: any\n    way: string\n}\n\nconst ArrayField: React.FC<Props> = ({field, json = [], name, onChange, onClick, way}) => {\n    const onChangeInArray = (i, value) => {\n        const newArray = [...json]\n        newArray[i] = value\n        onChange(name, newArray)\n    }\n\n    const handleClickAddItem = () => {\n        const newArray = [...json]\n        if (field.innerType.type === 'string') {\n            newArray.push('')\n        } else {\n            const newObj = createObject(field.innerType)\n            newArray.push(newObj)\n        }\n        onChange(name, newArray)\n    }\n\n    const handleClickRemoveItem = (index) => {\n        const newArray = json.filter((item, i) => i !== index)\n        onChange(name, newArray)\n    }\n\n    const handleClickItem = (item, i) => {\n        onClick(field.innerType, item, onChangeInArray, i, onClick, way+'>'+name + (i + 1))\n    }\n\n    return (\n        <div className='array-edit-container'>\n            <div className='edit-title'>\n                <h2>{name}</h2>\n                <button onClick={handleClickAddItem}>add</button>\n            </div>\n            <div>\n                <ItemsRows\n                    json={json}\n                    field={field.innerType}\n                    onClick={handleClickItem}\n                    removeItem={handleClickRemoveItem}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayField\n","import {TextField} from \"@material-ui/core\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\nimport {useEffect} from \"react\";\n\ninterface Props {\n    field: any\n    json?: any\n    name?: string|number\n    onChange: any\n}\n\nconst StringField: React.FC<Props> = ({field, json, name,onChange}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            label: typeof name === 'string'? name : '',\n            value: json\n        },\n        validateOnBlur: true,\n        validationSchema: yup.object({\n            'value':field\n        }),\n        onSubmit: () => {\n        }\n    });\n\n    useEffect(() => {\n        formik.setFieldValue('value', json)\n    }, [json])\n\n    const handleChange = (e) => {\n        formik.handleChange(e);\n        formik.setFieldTouched('value');\n        onChange(name,e.target.value)\n    }\n\n    return (\n        <div>\n            <TextField\n                fullWidth\n                name={'value'}\n                label={formik.values.label}\n                value={formik.values.value}\n                onChange={handleChange}\n                error={formik.touched.value && Boolean(formik.errors.value)}\n                helperText={formik.touched.value && formik.errors.value}\n            />\n        </div>\n    )\n}\n\nexport default StringField\n","import ObjectField from \"./ObjectField/ObjectField\";\nimport ArrayField from \"./ArrayField/ArrayField\";\nimport StringField from \"./StringtField/StringtField\";\n\nconst EditWindowConstructor = (props) => {\n    const type = props.field.type\n    const renderField = () => {\n        switch (type) {\n            case \"object\":\n                return <ObjectField {...props} />\n            case \"array\":\n                return <ArrayField {...props}/>\n            case \"string\":\n                return <StringField {...props}/>\n            default:\n                return null\n        }\n    }\n    return renderField()\n }\n\n export default EditWindowConstructor\n","import * as React from \"react\";\nimport EditWindowConstructor from \"./EditWindowConstructor/EditWindowConstructor\";\n\ninterface Props {\n    field?: any\n    json?: any\n    onChange?: any\n}\n\nconst EditWindow: React.FC<Props> = (props) => {\n    return(<EditWindowConstructor {...props}/>)\n}\n\nexport default EditWindow\n","import * as React from \"react\";\nimport { useState} from \"react\";\nimport Constructor from \"./Constructor/Constructor\";\nimport EditWindow from \"./EditWindow/EditWindow\";\nimport './NewEditor.css'\n\ninterface Props {\n    yupSchema: any\n    json: object\n    onChange: (object:object)=> void\n}\n\nconst NewEditor: React.FC<Props> = ({yupSchema,json,onChange}) => {\n    const [selectedItem, setSelectedItem] = useState<object >()\n\n    const handleClickElement = (field, json, onChange, name, onClick,way) => {\n        const selected = {name, field, json, onChange, onClick,way}\n        setSelectedItem(selected)\n    }\n\n    return (\n        <div className='container'>\n            <div className='json-tree-window'>\n                <div>\n                    <Constructor\n                        field={yupSchema}\n                        json={json}\n                        onChange={onChange}\n                        onClick={handleClickElement}\n                        selected={selectedItem}\n                    />\n                </div>\n            </div>\n\n            <div className='json-editor-window'>\n                {selectedItem &&\n                <EditWindow {...selectedItem}/>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default NewEditor\n","import * as yup from 'yup'\n\nexport const ApprovalPolicySchema = yup.object({\n    \"Approval Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Approval Groups\": yup.array().of(\n            yup.string().required('required')\n        ),\n        \"Route Templates\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Rank\": yup.string().required('required'),\n                \"Record Types\":yup.array().of(\n                    yup.string().required('required')\n                ),\n                \"Levels\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Approvers\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                    })\n\n                )\n            })\n        )\n    })\n})\n","import {ApprovalPolicySchema} from \"./ApprovalPolicy\";\nimport {RecordsManagementPolicySchema} from \"./RecordsManagementPolicy\";\nimport {SynchronizationPolicySchema} from \"./SynchronizationPolicy\";\n\nconst Schemes = [\n    {\n        label:'RecordsManagement Policy Schema',\n        value: RecordsManagementPolicySchema\n    },\n    {\n        label:'Approval Policy',\n        value: ApprovalPolicySchema\n    },\n    {\n        label:'Synchronization Policy Schema',\n        value: SynchronizationPolicySchema\n    },\n]\n\nexport default Schemes\n","import * as yup from 'yup'\n\nexport const RecordsManagementPolicySchema = yup.object({\n    \"Records Management Policy\": yup.object({\n        \"Version\": yup.string().required('required'),\n        \"Schema\": yup.object({\n            \"ID\": yup.string().url('Enter valid url').required('required'),\n            \"Major\": yup.string().required('required'),\n            \"Minor\": yup.string().required('required')\n        }),\n        \"Record Types\": yup.array().of(\n            yup.object({\n                \"Name\": yup.string().required('required'),\n                \"Definitions\": yup.array().of(\n                    yup.object({\n                        \"Systems\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Aliases\":yup.array().of(\n                            yup.object({\n                                \"Policy Field\": yup.string().required('required'),\n                                \"System Field\":yup.string().required('required')\n                            })\n                        ),\n                        \"Item Types\":yup.array().of(\n                            yup.string().required('required')\n                        ),\n                        \"Singular Name\": yup.string().required('required'),\n                        \"Plural Name\": yup.string().required('required'),\n                        \"Ownership Description\": yup.string().required('required'),\n                        \"Content Originator\": yup.string().required('required'),\n                    })\n                ),\n                \"Fields\": yup.array().of(\n                    yup.object({\n                        \"Name\": yup.string().required('required'),\n                        \"Is Data\": yup.string().required('required')\n                    })\n                )\n            })\n        )\n    })\n})\n","import * as yup from 'yup'\n\nexport const SynchronizationPolicySchema = yup.object({\n    \"Synchronization Policy\": yup.object({\n        \"Version\":yup.string().required('required'),\n        \"Locations\": yup.array().of(\n            yup.object({\n                \"System\": yup.string().required('required'),\n                \"Name\": yup.string().required('required'),\n                \"Server\": yup.string()\n                    .url('Enter valid url')\n                    .required('required'),\n                \"Service Account\": yup.string().required('required'),\n                \"Service Password\": yup.string().required('required'),\n                \"Urls\": yup.object({\n                    \"Browser\":yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                    \"API\": yup.string()\n                        .url('Enter valid url')\n                        .required('required'),\n                })\n            })\n        )\n    })\n})\n","import * as React from 'react';\nimport Select from \"react-select\";\nimport './Selector.css'\n\ninterface ArrayItem {\n    label: string\n    value: object\n}\n\ninterface ProfilesProps {\n    variants: Array<ArrayItem>\n    handleChange: (selectedOption:ArrayItem|null) => void\n    selected: ArrayItem|null\n}\n\nconst Selector:React.FC<ProfilesProps> = ({variants, handleChange, selected}) => {\n    return(\n        <div className='selector-container'>\n            <Select\n                value={selected}\n                onChange={handleChange}\n                options={variants}\n            />\n        </div>\n    )\n}\nexport default  Selector\n","export const createEmptyJsonObject = (schema) => {\n    const newObj = new Object(null)\n    for (const key in schema.fields){\n        switch (schema.fields[key].type){\n            case 'string':\n                newObj[key] = ''\n                break\n            case 'array':\n                newObj[key] = []\n                break\n            case 'object':\n                newObj[key] = createEmptyJsonObject(schema.fields[key])\n                break\n            default:\n                return null\n        }\n    }\n    return newObj\n}\n","import * as React from 'react';\nimport NewEditor from \"../NewEditor/NewEditor\";\nimport Schemes from \"../../json/schemes\";\n\nimport './MainWindow.css'\nimport Selector from \"../Selector/Selector\";\nimport {createEmptyJsonObject} from \"./helpers\";\nimport {useEffect, useRef} from \"react\";\n\n\nconst MainWindow: React.FC = () => {\n    const publishRef: any = useRef();\n    const [selectedSchema, setSelectedSchema] = React.useState<any>(Schemes[0])\n    const [json, setJson] = React.useState<any>(createEmptyJsonObject(selectedSchema.value))\n    const handleChangeSelector = (e) => {\n        setSelectedSchema(e)\n    }\n\n    const handleChange = (object) => {\n        setJson(object)\n    }\n\n    useEffect(() => {\n        const {current} = publishRef;\n        if (!current) {\n            return;\n        }\n        current.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json)));\n        current.setAttribute('download', `${selectedSchema.label}.json`);\n    }, [json])\n\n    useEffect(() => {\n        handleClickCreateNewJson()\n    }, selectedSchema)\n\n    const handleClickCreateNewJson = () => {\n        setJson(createEmptyJsonObject(selectedSchema.value))\n    }\n\n    const handleChangeFile = (event) => {\n        const file = event.target.files[0];\n        let reader = new FileReader();\n\n        reader.readAsText(file);\n\n        reader.onload = function () {\n            const selectedJson = JSON.parse(String(reader.result))\n            setJson(selectedJson)\n        };\n    }\n    return (\n        <>\n            <div className='actions'>\n                <div className='actions-add-json'>\n                    <Selector variants={Schemes} handleChange={handleChangeSelector} selected={selectedSchema}/>\n                    <button onClick={handleClickCreateNewJson}>Create</button>\n                    or\n                    <input type='file' onChange={handleChangeFile}/>\n                </div>\n                <a ref={publishRef}>publish</a>\n            </div>\n            <div>\n                <NewEditor yupSchema={selectedSchema.value} json={json} onChange={handleChange}/>\n            </div>\n        </>\n    )\n}\nexport default MainWindow\n","import MainWindow from \"./components/MainWindow/MainWindow\";\nimport './App.css'\n\nconst App = () => <MainWindow/>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}